<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Lucida]]></title>
  <link href="http://zh.lucida.me/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://zh.lucida.me/"/>
  <updated>2014-09-28T11:30:07+01:00</updated>
  <id>http://zh.lucida.me/</id>
  <author>
    <name><![CDATA[Lucida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime Text 全程指南]]></title>
    <link href="http://zh.lucida.me/blog/sublime-text-complete-guide/"/>
    <updated>2014-09-27T21:57:15+01:00</updated>
    <id>http://zh.lucida.me/blog/sublime-text-complete-guide</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">http://zh.lucida.me/blog/sublime-text-complete-guide/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>

<h2>摘要（Abstract）</h2>

<p>本文系统全面的介绍了Sublime Text，旨在成为最优秀的Sublime Text中文教程。</p>

<h3>更新记录</h3>

<ol>
<li>2014/09/27：完成初稿</li>
<li>2014/09/28：

<ul>
<li>更正打开控制台的快捷键为<code>Ctrl + `</code></li>
<li>更正全局替换的快捷键为<code>Ctrl + Alt + Enter</code></li>
</ul>
</li>
</ol>


<h2>前言（Prologue）</h2>

<p>Sublime Text是一款跨平台代码编辑器（Code Editor），从最初的Sublime Text 1.0，到现在的Sublime Text 3.0，Sublime Text从一个不知名的编辑器演变到现在几乎是各平台首选的GUI编辑器。而这样优秀的编辑器却没有一个靠谱的中文教程，所以我试图通过本文弥补这个缺陷。</p>

<h3>编辑器的选择（Editor Choices）</h3>

<p>从初学编程到现在，我用过的编辑器有EditPlus、UltraEdit、Notepad++、Vim、TextMate和Sublime Text，如果让我从中推荐，我会毫不犹豫的推荐Vim和Sublime Text，原因有下面几点：</p>

<!-- more -->


<ol>
<li><strong>跨平台</strong>：Vim和Sublime Text均为跨平台编辑器（在Linux、OS X和Windows下均可使用）。作为一个程序员，切换系统是常有的事情，为了减少重复学习，使用一个跨平台的编辑器是很有必要的。</li>
<li><strong>可扩展</strong>：Vim和Sublime Text都是可扩展的（Extensible），并包含大量实用插件，我们可以通过安装自己领域的插件来成倍提高工作效率。</li>
<li><strong>互补</strong>：Vim和Sublime Text分别是命令行环境（CLI）和图形界面环境（GUI）下的最佳选择，同时使用两者会大大提高工作效率。</li>
</ol>


<h3>个人背景（Personal Background）</h3>

<p>我是一名非常典型的程序员：平时工作主要在Linux环境下使用Java和Python，偶尔会用HTML+CSS+JavaScript编写网页；业余时会在Windows环境编写一些C#程序（包括控制台程序（Console Application）和移动应用（Mobile App），也会玩一些非主流语言（比如Haskell，ML和Ruby等）以拓展见识。</p>

<p>所以这篇文章会我的个人工作内容为主要使用场景（Scenario），尽管无法覆盖到所有的使用场景，但我认为依然可以覆盖到绝大部分，如果您认为我遗漏了什么内容，请在文章下面回复，我会尽量更新。</p>

<h3>本文风格（Writing Style）</h3>

<p>受益于<a href="http://en.wikipedia.org/wiki/The_C_Programming_Language">K&amp;R C</a>的写作风格，我倾向于以实际案例来讲解Sublime Text的功能，所以本文中的例子均源于我在实际开发时遇到的问题。</p>

<p>此外，把本文会使用大量动画（GIF）演示Sublime Text的编辑功能，因为我发现图片难以演示完整的编辑流程（Workflow），而视频又过于重量级。本文的GIF动画均使用<a href="http://screentogif.codeplex.com/">ScreenToGif</a>进行录制。</p>

<h3>编辑器（Editor） vs 集成开发环境（Integrated Development Environment，下文简称IDE）</h3>

<p>我经常看到一些程序员拿编辑器和IDE进行比较，诸如Vim比Eclipse强大或是Visual Studio太慢不如Notepad++好使之类的讨论比比皆是，个人认为这些讨论没有意义，因为编辑器和IDE根本是面向两种不同使用场景的工具：</p>

<ul>
<li>编辑器面向无语义的纯文本，不涉及领域逻辑，因此速度快体积小，适合编写单独的配置文件和动态语言脚本（Shell、Python和Ruby等）。</li>
<li>IDE面向有语义的代码，会涉及到大量领域逻辑，因此速度偏慢体积庞大，适合编写静态语言项目（Java、C++和C#等）。</li>
</ul>


<p>我认为应当使用正确的工具去做有价值的事情，并把效率最大化，所以我会用Eclipse编写Java项目，用Vim编写Shell，用Sublime Text编写JavaScript/HTML/Python，用Visual Studio编写C#。</p>

<p>前言到此结束，下面进入正题。</p>

<h2>安装（Installation）</h2>

<p>Sublime Text<a href="http://www.sublimetext.com/">官方网站</a>提供了Sublime Text各系统各版本的下载，目前Sublime Text的最新版本是<a href="http://www.sublimetext.com/3">Sublime Text 3</a>。这里以Windows版本的Sublime Text安装为例。</p>

<p>注意在安装时勾选<strong>Add to explorer context menu</strong>，这样在右键单击文件时就可以直接使用Sublime Text打开。</p>

<p><img src="http://i.imgur.com/zVtiXNP.jpg" alt="右键打开" /></p>

<h3>添加Sublime Text到环境变量</h3>

<p>使用<code>Win + R</code>运行<code>sysdm.cpl</code>打开“系统属性”。</p>

<p><img src="http://i.imgur.com/ysZe1BH.jpg" alt="sysdm.cpl" /></p>

<p>然后在“高级”选项卡里选择“环境变量”，编辑“Path”，增加Sublime Text的安装目录（例如<code>D:\Program Files\Sublime Text 3</code>）。</p>

<p><img src="http://i.imgur.com/dY5EaZX.jpg" alt="添加环境变量" /></p>

<p>接下来你就可以在命令行里面利用<code>subl</code>命令直接使用Sublime Text了：</p>

<p><code>
subl file    :: 使用Sublime Text打开file文件
subl folder  :: 使用Sublime Text打开folder文件夹
subl .       :: 使用Sublime Text当前文件夹
</code></p>

<h3>安装Package Control</h3>

<p>前文提到Sublime Text支持大量插件，如何找到并管理这些插件就成了一个问题，Package Control正是为了解决这个问题而出现的，利用它我们可以很方便的浏览、安装和卸载Sublime Text中的插件。</p>

<p>进入Package Control的<a href="https://sublime.wbond.net/">官网</a>，里面有详细的<a href="https://sublime.wbond.net/installation">安装教程</a>。Package Control支持Sublime Text 2和3，本文只给出3的安装流程：</p>

<ul>
<li>使用<code>Ctrl + `</code>打开Sublime Text控制台。</li>
<li>将下面的代码粘贴到控制台里：</li>
</ul>


<p><code>
import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></p>

<ul>
<li>等待Package Control安装完成。之后使用<code>Ctrl + Shift + P</code>打开命令板，输入<code>PC</code>应出现Package Control：</li>
</ul>


<p><img src="http://i.imgur.com/fgnl2Qj.jpg" alt="Package Control安装成功" /></p>

<p>成功安装Package Control之后，我们就可以方便的安装使用Sublime Text的各种插件：</p>

<p><img src="http://i.imgur.com/pnuar4c.gif" alt="使用Package Control安装插件" /></p>

<h2>购买（Purchase）</h2>

<p>Sublime Text是一个收费闭源软件，这在一定程度上成为了我支持Sublime Text的理由（我心中的软件靠谱程度：免费开源 &lt;&lt; 免费闭源 &lt; 收费开源 &lt; 收费闭源）：在<a href="https://www.sublimetext.com/buy">这里</a>购买。</p>

<p>不过不购买Sublime Text也可以“正常”使用它，只是Sublime Text会时不时的弹出一个对话框提醒你购买，此外窗口处会有一个很屌丝很low逼的<strong>(UNREGISTERED)</strong>。（在高频操作下，一般20分钟提示一次，个人认为算是很厚道了）</p>

<p><img src="http://i.imgur.com/hPNqz66.jpg" alt="提示注册" /></p>

<p>也许不少人会觉着Sublime Text 70刀的价格太贵，但相比它的功能和带来的效率提升，70刀真的不值一提，如果你不方便使用Paypal付款可以邮件联系我，你支付宝给我打款然后我帮你付款，价格按当日汇率折算（450元左右）。</p>

<p><img src="http://i.imgur.com/gWt2eLA.jpg" alt="购买之后" /></p>

<h2>概览（Tour）</h2>

<h3>基本概念（Basic Concepts）</h3>

<p>Sublime Text的界面如下：</p>

<p><img src="http://i.imgur.com/XrUYmH8.jpg" alt="Sublime Text" /></p>

<ul>
<li>标签（Tab）：无需介绍。</li>
<li>编辑区（Editing Area）：无需介绍。</li>
<li>侧栏（Side Bar）：包含当前打开的文件以及文件夹视图。</li>
<li>缩略图（Minimap）：如其名。</li>
<li>命令板（Command Palette）：Sublime Text的操作中心，它使得我们基本可以脱离鼠标和菜单栏进行操作。</li>
<li>控制台（Console）：使用<code>Ctrl + `</code>调出，它既是一个标准的Python REPL，也可以直接对Sublime Text进行配置。</li>
<li>状态栏（Status Bar）：显示当前行号、当前语言和Tab格式等信息。</li>
</ul>


<h3>配置（Settings）</h3>

<p>与其他GUI环境下的编辑器不同，Sublime Text并没有一个专门的配置界面，与之相反，Sublime Text使用JSON配置文件，例如：</p>

<p><code>
{
  "font_size": 12,
  "highlight_line": true,
}
</code></p>

<p>会将默认字体大小调整为12，并高亮当前行。</p>

<p>JSON配置文件的引入简化了Sublime Text的界面，但也使得配置变的复杂，一般我会到<a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/settings.html">这里</a>查看可用的Sublime Text配置。</p>

<h2>编辑（Editing）</h2>

<p>Sublime Text的编辑十分人性化——它不像Vim那样反人类（尽管我也用Vim但我还是要说Vim的快捷键设定绝壁连代谢产物都不如），少量的快捷键就可以完成绝大多数编辑任务。</p>

<h3>基本编辑（Basic Editing）</h3>

<p><code>↑↓←→</code>就是<code>↑↓←→</code>，不是<code>KJHL</code>，（没错我就是在吐槽Vim，尼玛设成<code>WSAD</code>也比这个强啊），粘贴剪切复制均和系统一致。</p>

<p><code>Ctrl + Enter</code>在当前行下面新增一行然后跳至该行；<code>Ctrl + Shift + Enter</code>在当前行上面增加一行并跳至该行。</p>

<p><img src="http://i.imgur.com/rvzS9Ok.gif" alt="演示新增行" /></p>

<p><code>Ctrl + ←/→</code>进行逐词移动，相应的，<code>Ctrl + Shift + ←/→</code>进行逐词选择。</p>

<p><img src="http://i.imgur.com/jFnTDl3.gif" alt="演示逐词移动及选择" /></p>

<p><code>Ctrl + ↑/↓</code>移动当前显示区域，<code>Ctrl + Shift + ↑/↓</code>移动当前行。</p>

<p><img src="http://i.imgur.com/v31pd3k.gif" alt="演示移动当前行" /></p>

<h3>选择（Selecting）</h3>

<p>Sublime Text的一大亮点是支持多重选择——同时选择多个区域，然后同时进行编辑。</p>

<p><code>Ctrl + D</code>选择当前光标所在的词并高亮该词所有出现的位置，再次<code>Ctrl + D</code>选择该词出现的下一个位置，在多重选词的过程中，使用<code>Ctrl + K</code>进行跳过，使用<code>Ctrl + U</code>进行回退，使用<code>Esc</code>退出多重编辑。</p>

<p>多重选词的一大应用场景就是重命名——从而使得代码更加整洁。尽管Sublime Text无法像IDE（例如Eclipse）那样进行自动重命名，但我们可以通过多重选词+多重编辑进行直观且便捷的重命名：</p>

<p><img src="http://i.imgur.com/IRVbUTJ.gif" alt="利用多重选词进行重命名" /></p>

<p>有时我们需要对一片区域的所有行进行同时编辑，<code>Ctrl + Shift + L</code>可以将当前选中区域打散，然后进行同时编辑：</p>

<p><img src="http://i.imgur.com/0NHpXFl.gif" alt="利用打散为列表套上引号" /></p>

<p>有打散自然就有合并，<code>Ctrl + J</code>可以把当前选中区域合并为一行：</p>

<p><img src="http://i.imgur.com/hfRAyiy.gif" alt="合并选中行" /></p>

<h3>查找&amp;替换（Finding&amp;Replacing）</h3>

<p>Sublime Text提供了强大的查找（和替换）功能，为了提供一个清晰的介绍，我将Sublime Text的查找功能分为<strong>快速查找</strong>、<strong>标准查找</strong>和<strong>多文件查找</strong>三种类型。</p>

<h4>快速查找&amp;替换</h4>

<p>多数情况下，我们需要查找文中某个关键字出现的其它位置，这时并不需要重新将该关键字重新输入一遍然后搜索，我们只需要使用<code>Shift + ←/→</code>或<code>Ctrl + D</code>选中关键字，然后<code>F3</code>跳到其下一个出现位置，<code>Shift + F3</code>跳到其上一个出现位置，此外还可以用<code>Alt + F3</code>选中其出现的所有位置（之后可以进行多重编辑，也就是快速替换）。</p>

<p><img src="http://i.imgur.com/gcaHacI.gif" alt="使用快速替换" /></p>

<h4>标准查找&amp;替换</h4>

<p>另一种常见的使用场景是搜索某个已知但不在当前显示区域的关键字，这时可以使用<code>Ctrl + F</code>调出搜索框进行搜索：</p>

<p><img src="http://i.imgur.com/6AaBiRS.jpg" alt="Sublime Text的搜索框" /></p>

<p>以及使用<code>Ctrl + H</code>进行替换：</p>

<p><img src="http://i.imgur.com/4NnE9SN.jpg" alt="Sublime Text的替换框" /></p>

<h5>关键字查找&amp;替换</h5>

<p>对于普通用户来说，常规的关键字搜索就可以满足其需求：在搜索框输入关键字后<code>Enter</code>跳至关键字当前光标的下一个位置，<code>Shift + Enter</code>跳至上一个位置，<code>Alt + Enter</code>选中其出现的所有位置（同样的，接下来可以进行快速替换）。</p>

<p>Sublime Text的查找有不同的模式：<code>Alt + C</code>切换大小写敏感（Case-sensitive）模式，<code>Alt + W</code>切换整字匹配（Whole matching）模式，除此之外Sublime Text还支持在选中范围内搜索（Search in selection），这个功能没有对应的快捷键，但可以通过以下配置项自动开启。</p>

<p><code>
"auto_find_in_selection": true
</code></p>

<p>这样之后在选中文本的状态下范围内搜索就会自动开启，配合这个功能，局部重命名（Local Renaming）变的非常方便：</p>

<p><img src="http://i.imgur.com/QRIsDra.gif" alt="使用范围搜索进行局部重命名" /></p>

<p>使用<code>Ctrl + H</code>进行标准替换，输入替换内容后，使用<code>Ctrl + Shift + H</code>替换当前关键字，<code>Ctrl + Alt + Enter</code>替换所有匹配关键字。</p>

<h5>正则表达式查找&amp;替换</h5>

<p><a href="http://en.wikipedia.org/wiki/Regular_expression">正则表达式</a>是非常强大的文本查找&amp;替换工具，Sublime Text中使用<code>Alt + R</code>切换正则匹配模式的开启/关闭。Sublime Text的使用<a href="http://www.boost.org/doc/libs/1_44_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html">Boost里的Perl正则表达式风格</a>。</p>

<p>出于篇幅原因，本文不会对正则表达式进行详细介绍，<a href="http://regex.info/">Mastering Regex</a>（中译本：<a href="http://book.douban.com/subject/2154713/">精通正则表达式</a>）对正则表达式的原理和各语言下的使用进行了详细介绍。此外网上有大量正则表达式的优秀教程（<a href="http://deerchao.net/tutorials/regex/regex.htm">“正则表达式30分钟入门教程”</a>和<a href="http://msdn.microsoft.com/zh-cn/library/ae5bf541(v=vs.90">MSDN正则表达式教程</a>.aspx)），以及在线测试工具（<a href="http://regexpal.com/">regexpal</a>和<a href="http://www.regexr.com/">regexer</a>）。</p>

<h4>多文件搜索&amp;替换</h4>

<p>使用<code>Ctrl + Shift + F</code>开启多文件搜索&amp;替换（注意此快捷键和搜狗输入法的简繁切换快捷键有冲突）：</p>

<p><img src="http://i.imgur.com/05Fchle.jpg" alt="多文件搜索界面" /></p>

<p>多文件搜索&amp;替换默认在当前打开的文件和文件夹进行搜索/替换，我们也可以指定文件/文件夹进行搜索/替换。</p>

<h3>跳转（Jumping）</h3>

<p>Sublime Text提供了强大的跳转功能使得我们可以在不同的文件/方法/函数中无缝切换。就我的使用经验而言，目前还没有哪一款编辑器可以在这个方面超越Sublime Text。</p>

<h4>跳转到文件</h4>

<p><code>Ctrl + P</code>会列出当前打开的文件（或者是当前文件夹的文件），输入文件名然后<code>Enter</code>跳转至该文件。</p>

<p>需要注意的是，Sublime Text使用模糊字符串匹配（Fuzzy String Matching），这也就意味着你可以通过文件名的前缀、首字母或是某部分进行匹配：例如，<code>EIS</code>、<code>Eclip</code>和<code>Stupid</code>都可以匹配<code>EclipseIsStupid.java</code>。</p>

<p><img src="http://i.imgur.com/db15c5n.gif" alt="跳转到文件" /></p>

<h4>跳转到符号</h4>

<p>尽管是一个文本编辑器，Sublime Text能够对代码符号进行一定程度的索引。<code>Ctrl + R</code>会列出当前文件中的符号（例如类名和函数名，但无法深入到变量名），输入符号名称<code>Enter</code>即可以跳转到该处。此外，还可以使用<code>F12</code>快速跳转到当前光标所在符号的定义处（Jump to Definition）。</p>

<p><img src="http://i.imgur.com/D2rGDck.gif" alt="跳转到符号" /></p>

<p>比较有意思的是，对于Markdown，<code>Ctrl + R</code>会列出其大纲，非常实用。</p>

<p><img src="http://i.imgur.com/qDnjcNn.jpg" alt="Markdown大纲" /></p>

<h4>跳转到某行</h4>

<p><code>Ctrl + G</code>然后输入行号以跳转到指定行：</p>

<p><img src="http://i.imgur.com/F5BLsae.gif" alt="跳转到某行" /></p>

<h4>组合跳转</h4>

<p>在<code>Ctrl + P</code>匹配到文件后，我们可以进行后续输入以跳转到更精确的位置：</p>

<ul>
<li><code>@</code> 符号跳转：输入<code>@symbol</code>跳转到<code>symbol</code>符号所在的位置</li>
<li><code>#</code> 关键字跳转：输入<code>#keyword</code>跳转到<code>keyword</code>所在的位置</li>
<li><code>:</code> 行号跳转：输入<code>:12</code>跳转到文件的第12行。</li>
</ul>


<p><img src="http://i.imgur.com/3y9MG88.gif" alt="组合跳转演示" /></p>

<p>所以Sublime Text把<code>Ctrl + P</code>称之为<strong>“Go To Anything”</strong>，这个功能如此好用，以至于我认为没有其它编辑器能够超越它。</p>

<h3>中文输入法的问题</h3>

<p>从Sublime Text的初版（1.0）到现在（3.0 3065），中文输入法（包括日文输入法）都有一个问题：输入框不跟随。</p>

<p><img src="http://i.imgur.com/VQQ87Rr.jpg" alt="输入框不跟随" /></p>

<p>目前官方还没有修复这个bug，解决方法是安装<code>IMESupport</code>插件，之后重启Sublime Text问题就解决了。</p>

<p><img src="http://i.imgur.com/ErbK7wH.jpg" alt="修复之后输入框跟随" /></p>

<h3>文件夹（Folders）</h3>

<p>Sublime Text支持以文件夹做为单位进行编辑，这在编辑一个文件夹下的代码时尤其有用。在<code>File</code>下<code>Open Folder</code>：</p>

<p><img src="http://i.imgur.com/xS9Nriz.jpg" alt="文件夹视图" /></p>

<p>你会发现右边多了一个侧栏，这个侧栏列出了当前打开的文件和文件夹的文件，使用<code>Ctrl + K, Ctrl + B</code>显示或隐藏侧栏，使用<code>Ctrl + P</code>快速跳转到文件夹里的文件。</p>

<h2>窗口&amp;标签（Windows &amp; Tabs）</h2>

<p>Sublime Text是一个多窗口多标签编辑器：我们既可以开多个Sublime Text窗口，也可以在一个Sublime Text窗口内开多个标签。</p>

<h3>窗口（Window）</h3>

<p>使用<code>Ctrl + Shift + N</code>创建一个新窗口（该快捷键再次和搜狗输入法快捷键冲突，个人建议禁用所有搜狗输入法快捷键）。</p>

<p>当窗口内没有标签时，使用<code>Ctrl + W</code>关闭该窗口。</p>

<h3>标签（Tab）</h3>

<p>使用<code>Ctrl + N</code>在当前窗口创建一个新标签，<code>Ctrl + W</code>关闭当前标签，<code>Ctrl + Shift + T</code>恢复刚刚关闭的标签。</p>

<p>编辑代码时我们经常会开多个窗口，所以分屏很重要。<code>Alt + Shift + 2</code>进行左右分屏，<code>Alt + Shift + 8</code>进行上下分屏，<code>Alt + Shift + 5</code>进行上下左右分屏（即分为四屏）。</p>

<p><img src="http://i.imgur.com/lAvhuX6.gif" alt="各种分屏" /></p>

<p>分屏之后，使用<code>Ctrl + 数字键</code>跳转到指定屏，使用<code>Ctrl + Shift + 数字键</code>将当前屏移动到指定屏。例如，<code>Ctrl + 1</code>会跳转到1屏，而<code>Ctrl + Shift + 2</code>会将当前屏移动到2屏。</p>

<h3>全屏（Full Screen）</h3>

<p>Sublime Text有两种全屏模式：普通全屏和无干扰全屏。</p>

<p>个人强烈建议在开启全屏前关闭菜单栏（Toggle Menu），否则全屏效果会大打折扣。</p>

<p><code>F11</code>切换普通全屏：</p>

<p><img src="http://i.imgur.com/Kdj9eEX.jpg" alt="普通全屏" /></p>

<p><code>Shift + F11</code>切换无干扰全屏：</p>

<p><img src="http://i.imgur.com/mnTIFQk.jpg" alt="无干扰全屏" /></p>

<h2>风格（Styles）</h2>

<p>风格对于任何软件都很重要，对编辑器也是如此，尤其是GUI环境下的编辑器。作为一个程序员，我希望我的编辑器足够简洁且足够个性。</p>

<p>Notepad++默认界面</p>

<p><img src="http://i.imgur.com/MZb7AsV.png" alt="Notepad++" /></p>

<p>Sublime Text默认界面</p>

<p><img src="http://i.imgur.com/ZzwQ0sI.png" alt="Sublime Text" /></p>

<p>所以在用过Sublime Text之后，我立刻就卸掉了Notepad++。</p>

<p>Sublime Text自带的风格是我喜欢的深色风格（也可以调成浅色），默认主题是<code>Monokai Bright</code>，这两者的搭配已经很不错了，不过我们还可以做得更好：接下来我将会展示如何通过设置偏好项和添加自定义风格/主题使得Sublime Text更加Stylish。</p>

<h3>一些设置（Miscellaneous Settings）</h3>

<p>下面是我个人使用的设置项。</p>

<p><code>
// 设置Sans-serif（无衬线）等宽字体，以便阅读
"font_face": "YaHei Consolas Hybrid",
"font_size": 12,
// 使光标闪动更加柔和
"caret_style": "phase",
// 高亮当前行
"highlight_line": true,
// 高亮有修改的标签
"highlight_modified_tabs": true,
</code></p>

<p>设置之后的效果如下：</p>

<p><img src="http://i.imgur.com/MkyHff5.jpg" alt="设置效果" /></p>

<h3>主题（Themes）</h3>

<p>Sublime Text有大量第三方主题：[<a href="https://sublime.wbond.net/browse/labels/theme">https://sublime.wbond.net/browse/labels/theme</a>]，这里我给出几个个人感觉不错的主题：</p>

<h4><a href="https://sublime.wbond.net/packages/Theme%20-%20Soda">Soda Light</a></h4>

<p><img src="http://i.imgur.com/exxgbm1.png" alt="浅色版" /></p>

<h4><a href="https://sublime.wbond.net/packages/Theme%20-%20Soda">Soda Dark</a></h4>

<p><img src="http://i.imgur.com/YsrCJMe.png" alt="深色版" /></p>

<h4><a href="https://sublime.wbond.net/packages/Theme%20-%20Nexus">Nexus</a></h4>

<p><img src="http://i.imgur.com/ECLGEWD.png" alt="Nexus" /></p>

<h4><a href="https://sublime.wbond.net/packages/Theme%20-%20Flatland">Flatland</a></h4>

<p><img src="http://i.imgur.com/LT0AyhR.png" alt="Flatland" /></p>

<h4><a href="https://sublime.wbond.net/packages/Theme%20-%20Spacegray">Spacegray Light</a></h4>

<p><img src="http://i.imgur.com/j0hJqeV.png" alt="浅色版" /></p>

<h4><a href="https://sublime.wbond.net/packages/Theme%20-%20Spacegray">Spacegray Dark</a></h4>

<p><img src="http://i.imgur.com/CJJhvTj.png" alt="深色版" /></p>

<h3>配色（Color）</h3>

<p><a href="http://colorsublime.com/">colorsublime</a>包含了大量Sublime Text配色方案，并支持在线预览，配色方案的安装教程在<a href="http://colorsublime.com/how-to-install-a-theme">这里</a>，恕不赘述。</p>

<p>我个人使用的是<a href="https://sublime.wbond.net/packages/Theme%20-%20Nexus">Nexus</a>主题和<a href="https://sublime.wbond.net/packages/Theme%20-%20Flatland">Flatland Dark</a>配色，配置如下：</p>

<p><code>
"theme": "Nexus.sublime-theme",
"color_scheme": "Packages/Theme - Flatland/Flatland Dark.tmTheme",
</code></p>

<p>效果如下：</p>

<p><img src="http://i.imgur.com/gCxTGii.jpg" alt="Nexus+Flatland" /></p>

<h2>编码（Coding）</h2>

<p>优秀的编辑器使编码变的更加容易，所以Sublime Text提供了一系列功能以提高开发效率。</p>

<h3>良好实践（Good Practices）</h3>

<p>良好的代码应该是规范的，所以Google为每一门主流语言都设置了其代码规范（Code Style Guideline）。我自己通过下面的设置使以规范化自己的代码。</p>

<p><code>
// 设置tab的大小为2
"tab_size": 2,
// 使用空格代替tab
"translate_tabs_to_spaces": true,
// 添加行宽标尺
"rulers": [80, 100],
// 显示空白字符
"draw_white_space": "all",
// 保存时自动去除行末空白
"trim_trailing_white_space_on_save": true,
// 保存时自动增加文件末尾换行
"ensure_newline_at_eof_on_save": true,
</code></p>

<h3>代码段（Code Snippets）</h3>

<p>Sublime Text支持代码段（Code Snippet），输入代码段名称后<code>Tab</code>即可生成代码段。</p>

<p><img src="http://i.imgur.com/EQc1zNX.gif" alt="代码段效果" /></p>

<p>你可以通过Package Control安装第三方代码段，也可以自己创建代码段，参考<a href="http://www.hongkiat.com/blog/sublime-code-snippets/">这里</a>。</p>

<h3>格式化（Formatting）</h3>

<p>Sublime Text基本的手动格式化操作包括：<code>Ctrl + [</code>向左缩进，<code>Ctrl + ]</code>向右缩进，此外<code>Ctrl + Shift + V</code>可以以当前缩进粘贴代码（非常实用）。</p>

<p>除了手动格式化，我们也可以通过安装插件实现自动缩进和智能对齐：</p>

<ul>
<li><a href="https://sublime.wbond.net/packages/HTMLBeautify">HTMLBeautify</a>：格式化HTML。</li>
<li><a href="https://sublime.wbond.net/packages/AutoPEP8">AutoPEP8</a>：格式化Python代码。</li>
<li><a href="https://sublime.wbond.net/packages/Alignment">Alignment</a>：进行智能对齐。</li>
</ul>


<h3>自动完成（Auto Completion）</h3>

<p>Sublime Text 支持一定的自动完成，按<code>Tab</code>自动补全。</p>

<p><img src="http://i.imgur.com/cqBI3NW.jpg" alt="自动完成" /></p>

<h3>括号（Brackets）</h3>

<p>编写代码时会碰到大量的括号，利用<code>Ctrl + M</code>可以快速的在起始括号和结尾括号间切换，<code>Ctrl + Shift + M</code>则可以快速选择括号间的内容，对于缩进型语言（例如Python）则可以使用<code>Ctrl + Shift + J</code>。</p>

<p><img src="http://i.imgur.com/oxWjAo9.gif" alt="括号演示" /></p>

<p>此外，我使用<a href="https://sublime.wbond.net/packages/BracketHighlighter">BracketHighlighter</a>插件以高亮显示配对括号以及当前光标所在区域，效果如下：</p>

<p><img src="http://i.imgur.com/QQpG99h.gif" alt="插件演示" /></p>

<h3>命令行（Command Line）</h3>

<p>尽管提供了Python控制台，但Sublime Text的控制台仅支持单行输入，十分不方便，所以我使用<a href="https://sublime.wbond.net/packages/SublimeREPL">Sublime​REPL</a>以进行一些编码实验（Experiments）。</p>

<p><img src="http://i.imgur.com/dZgi8QZ.gif" alt="SublimeREPL演示" /></p>

<h2>其它（Miscellaneous）</h2>

<p>尽管我试图在本文包含尽可能多的Sublime Text实用技能，但受限于篇幅和我的个人经验，本文仍不免有所遗漏，欢迎在评论里指出本文的错误及遗漏。</p>

<p>下面是一些可能有用但我很少用到的功能：</p>

<ul>
<li>宏（Macro）：Sublime Text支持<a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/extensibility/macros.html">录制宏</a>，但我在实际工作中并未发现宏有多大用处。</li>
<li>其它平台（Other Platforms）：本文只介绍了Windows平台上Sublime Text的使用，不过Linux和OS X上Sublime Text的使用方式和Windows差别不大，只是在快捷键上有所差异，请参考<a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_win.html">Windows/Linux快捷键</a>和<a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">OS X快捷键</a>。</li>
<li>项目（Projects）：Sublime Text支持简单的<a href="http://www.sublimetext.com/docs/3/projects.html">项目管理</a>，但我一般只用到文件夹。</li>
<li>Vim模式（Vintage）：Sublime Text自带<a href="http://www.sublimetext.com/docs/3/vintage.html">Vim模式</a>。</li>
<li>构建（Build）：通过配置，Sublime Text可以进行<a href="http://docs.sublimetext.info/en/latest/file_processing/build_systems.html">源码构建</a>。</li>
<li>调试（Debug）：通过安装<a href="https://sublime.wbond.net/search/debug">插件</a>，Sublime Text可以对代码进行调试。</li>
</ul>


<h2>快捷键列表（Shortcuts Cheatsheet）</h2>

<p>我把本文出现的Sublime Text按其类型整理在这里，以便查阅。</p>

<h3>通用（General）</h3>

<ul>
<li><code>↑↓←→</code>：上下左右移动光标，注意不是不是<code>KJHL</code>！</li>
<li><code>Alt</code>：调出菜单</li>
<li><code>Ctrl + Shift + P</code>：调出命令板（Command Palette）</li>
<li><code>Ctrl + `</code>：调出控制台</li>
</ul>


<h3>编辑（Editing）</h3>

<ul>
<li><code>Ctrl + Enter</code>：在当前行下面新增一行然后跳至该行</li>
<li><code>Ctrl + Shift + Enter</code>：在当前行上面增加一行并跳至该行</li>
<li><code>Ctrl + ←/→</code>：进行逐词移动</li>
<li><code>Ctrl + Shift + ←/→</code>进行逐词选择</li>
<li><code>Ctrl + ↑/↓</code>移动当前显示区域</li>
<li><code>Ctrl + Shift + ↑/↓</code>移动当前行</li>
</ul>


<h3>选择（Selecting）</h3>

<ul>
<li><code>Ctrl + D</code>：选择当前光标所在的词并高亮该词所有出现的位置，再次<code>Ctrl + D</code>选择该词出现的下一个位置，在多重选词的过程中，使用<code>Ctrl + K</code>进行跳过，使用<code>Ctrl + U</code>进行回退，使用<code>Esc</code>退出多重编辑</li>
<li><code>Ctrl + Shift + L</code>：将当前选中区域打散</li>
<li><code>Ctrl + J</code>：把当前选中区域合并为一行</li>
<li><code>Ctrl + M</code>：在起始括号和结尾括号间切换</li>
<li><code>Ctrl + Shift + M</code>：快速选择括号间的内容</li>
<li><code>Ctrl + Shift + J</code>：快速选择同缩进的内容</li>
<li><code>Ctrl + Shift + Space</code>：快速选择当前作用域（Scope）的内容</li>
</ul>


<h3>查找&amp;替换（Finding&amp;Replacing）</h3>

<ul>
<li><code>F3</code>：跳至当前关键字下一个位置</li>
<li><code>Shift + F3</code>：跳到当前关键字上一个位置</li>
<li><code>Alt + F3</code>：选中当前关键字出现的所有位置</li>
<li><code>Ctrl + F/H</code>：进行标准查找/替换，之后：

<ul>
<li><code>Alt + C</code>：切换大小写敏感（Case-sensitive）模式</li>
<li><code>Alt + W</code>：切换整字匹配（Whole matching）模式</li>
<li><code>Alt + R</code>：切换正则匹配（Regex matching）模式</li>
<li><code>Ctrl + Shift + H</code>：替换当前关键字</li>
<li><code>Ctrl + Alt + Enter</code>：替换所有关键字匹配</li>
</ul>
</li>
<li><code>Ctrl + Shift + F</code>：多文件搜索&amp;替换</li>
</ul>


<h3>跳转（Jumping）</h3>

<ul>
<li><code>Ctrl + P</code>：跳转到指定文件，输入文件名后可以：

<ul>
<li><code>@</code> 符号跳转：输入<code>@symbol</code>跳转到<code>symbol</code>符号所在的位置</li>
<li><code>#</code> 关键字跳转：输入<code>#keyword</code>跳转到<code>keyword</code>所在的位置</li>
<li><code>:</code> 行号跳转：输入<code>:12</code>跳转到文件的第12行。</li>
</ul>
</li>
<li><code>Ctrl + R</code>：跳转到指定符号</li>
<li><code>Ctrl + G</code>：跳转到指定行号</li>
</ul>


<h3>窗口（Window）</h3>

<ul>
<li><code>Ctrl + Shift + N</code>：创建一个新窗口</li>
<li><code>Ctrl + N</code>：在当前窗口创建一个新标签</li>
<li><code>Ctrl + W</code>：关闭当前标签，当窗口内没有标签时会关闭该窗口</li>
<li><code>Ctrl + Shift + T</code>：恢复刚刚关闭的标签</li>
</ul>


<h3>屏幕（Screen）</h3>

<ul>
<li><code>F11</code>：切换普通全屏</li>
<li><code>Shift + F11</code>：切换无干扰全屏</li>
<li><code>Alt + Shift + 2</code>：进行左右分屏</li>
<li><code>Alt + Shift + 8</code>：进行上下分屏</li>
<li><code>Alt + Shift + 5</code>：进行上下左右分屏</li>
<li>分屏之后，使用<code>Ctrl + 数字键</code>跳转到指定屏，使用<code>Ctrl + Shift + 数字键</code>将当前屏移动到指定屏</li>
</ul>


<h2>延伸阅读（Further Reading）</h2>

<h3>书籍（Books）</h3>

<ul>
<li><a href="http://www.amazon.com/Mastering-Sublime-Community-Experience-Distilled/dp/1849698422/">Mastering Sublime Text</a>：我读过的唯一一本关于Sublime Text的书籍，书中介绍的插件很实用，但对编辑技巧介绍不全。</li>
<li><a href="http://www.amazon.com/Instant-Sublime-Text-Starter-Haughee/dp/1849693927/">Instant Sublime Text Starter</a>：另外一本关于Sublime Text的书，我没有读过。</li>
</ul>


<h3>链接（Links）</h3>

<ul>
<li>官方文档：<a href="http://www.sublimetext.com/docs/3/">http://www.sublimetext.com/docs/3/</a></li>
<li>官方论坛：<a href="http://www.sublimetext.com/forum/">http://www.sublimetext.com/forum/</a></li>
<li>Stack Overflow的Sublime Text频道：

<ul>
<li><a href="http://stackoverflow.com/questions/tagged/sublimetext">http://stackoverflow.com/questions/tagged/sublimetext</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/sublimetext2">http://stackoverflow.com/questions/tagged/sublimetext2</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/sublimetext3">http://stackoverflow.com/questions/tagged/sublimetext3</a></li>
</ul>
</li>
<li>非官方文档：<a href="http://sublime-text-unofficial-documentation.readthedocs.org/">http://sublime-text-unofficial-documentation.readthedocs.org/</a> 甚至比官方文档还要全面！</li>
<li>Package Control：<a href="https://sublime.wbond.net/">https://sublime.wbond.net/</a> 大量的Sublime Text插件和主题。</li>
</ul>


<h3>视频（Videos）</h3>

<ul>
<li>Getting Started with SublimeText：<a href="https://www.youtube.com/watch?v=04gKiTiRlq8">https://www.youtube.com/watch?v=04gKiTiRlq8</a></li>
<li>Sublime Text Pefect Workflow：<a href="https://www.youtube.com/watch?v=bpEp0ePIOEM&amp;list=PLuwqxbvf3olpLsnFvo06gbrkcEB5o7K0g">https://www.youtube.com/watch?v=bpEp0ePIOEM&amp;list=PLuwqxbvf3olpLsnFvo06gbrkcEB5o7K0g</a></li>
</ul>


<h2>关于作者（About Me）</h2>

<p><a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">http://zh.lucida.me/blog/sublime-text-complete-guide/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>

<p>正在尽量努力成为一名靠谱的软件工程师 :&ndash;|</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程错误的思考——2. Blunders, Typos, Mismatches, and Language Liability]]></title>
    <link href="http://zh.lucida.me/blog/on-programming-errors-2/"/>
    <updated>2014-06-27T23:46:53+01:00</updated>
    <id>http://zh.lucida.me/blog/on-programming-errors-2</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-2/">原文链接</a></p>

<h2>概要</h2>

<p><strong>关于编程错误的思考</strong>是一个博文系列，我试图通过结合<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对编程错误的分类以及自己的编程经验，对常见的编程错误、以及如何控制和预防这些错误进行介绍。</p>

<ol>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-0/">Knuth, TEX, and the Errors of TEX</a></li>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-1/">A Taxonomy of Programming Errors</a></li>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-2/">Blunders, Typos, Mismatches, and Language Liability</a></li>
<li>Algorithm + Data Structures &ndash;> Programming</li>
<li>Robustness and Surprise</li>
<li>On Enhancing Existing Systems</li>
<li>Epilogue</li>
</ol>


<h2>对编程错误的分析</h2>

<p>上篇文章（<a href="http://zh.lucida.me/blog/on-programming-errors-1/">A Taxonomy of Programming Errors</a>）介绍了Knuth对编程错误的分类，基于Knuth的分类和我自己的编程经验，从这篇文章开始我将会给出各类编程错误的<strong>案例</strong>、<strong>诱因</strong>和<strong>对策</strong>。</p>

<p>按照复杂程度的不同，Knuth将编程错误分为三大类，这篇文章介绍第一类错误——简单的错误：</p>

<ul>
<li><strong>粗心大意</strong>：敲错了代码。</li>
<li><strong>鬼使神差</strong>：敲串了代码。</li>
<li><strong>丢三落四</strong>：忘敲了代码。</li>
<li><strong>言非所指</strong>：踩语言的坑。</li>
<li><strong>事与愿违</strong>：中自己的坑。</li>
</ul>


<!-- more -->


<h2>粗心大意（a trivial typo）</h2>

<blockquote><p>Sometimes I did&rsquo;t type the right thing when I entered the program into the computer, although my original pencil draft was correct.</p>

<p>我在打字时会犯一些小错，以至我纸上的草稿是对的，但敲进去的是错的。</p></blockquote>

<p><strong>粗心大意</strong>这类差错源自于Knuth奇葩的开发方式——先把程序在纸上写好然后再"誊写"到计算机中，而在"誊写"时可能会敲错几个字符，从而导致程序出错。</p>

<p>除去面试时的白板编码，我认为现代程序开发不可能在纸上进行——从而也不可能产生这种差错，所以不加赘述。</p>

<h2>鬼使神差（a blunder or botch）</h2>

<blockquote><p>Here I knew what I ought to do, but I wrote something else that was syntactically correct&mdash;sort of a mental typo.</p>

<p>我知道这段代码该怎么写，但我糊里糊涂写了另外一段出来而且还能通过编译。</p></blockquote>

<h3>案例</h3>

<p>Knuth在<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>中提到一个低级Bug：TEX代码里有两个变量<code>new_line</code>和<code>next_line</code>：<code>new_line</code>用于表示程序当前的状态，而<code>next_line</code>则指代换行符。然而开发过程中Knuth混淆了这两个变量的用途——由于这两个变量属于同一类型所以编译器无法检测出这个问题，这个Bug直到后来程序运行了一段时间才被发现。</p>

<h3>诱因</h3>

<ul>
<li>变量名含糊不清：导致之后的误用。</li>
<li>编程语言过分宽容：某些编程语言对代码特别宽容——比如动态编程语言会将静态编程语言在编译时做的类型检查拖到运行时，尽管获得了灵活性，但却损失了精确性。从而导致<strong>鬼使神差</strong>这类静态语言编译期就能检查到的错误直到运行时才会被发现。</li>
<li>加班超负荷工作：从而导致写出翔一般的代码。</li>
</ul>


<h3>对策</h3>

<ol>
<li>使用精准的名字：

<ul>
<li>作用域越长的变量的名字越要精确。</li>
<li>使用精准的英文词汇描述变量。</li>
<li>更多关于命名的信息请参考<a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/">Code Complete</a>中<strong>The Power of Variable Names</strong>一节。</li>
</ul>
</li>
<li>严格控制全局变量：

<ul>
<li>能不用则不用。</li>
<li>如果不得不使用，使用明确的名字，进行详细的注释，并注明不得不使用全局变量的原因。。</li>
</ul>
</li>
<li>优先使用强类型：例如对于内置强类型枚举（Enum）的语言（例如Java，C#，和C++），使用枚举类型表示状态（State），而非整数类型。</li>
<li>将编译器警告调到最高级：然后清除代码中所有的Warning。</li>
<li>单元测试：编写单元测试，保证代码覆盖，确保一段代码都按期望的方式执行。</li>
<li>单步（Step Into）自己的代码：编写新代码后进行单步调试——你脑中的代码和实际可能不一样。</li>
<li>进行代码审查：可以参考<a href="http://coolshell.cn/articles/11432.html">这篇文章</a>。</li>
<li>不要在混沌状态提交代码。</li>
</ol>


<h2>丢三落四（a forgotten function）</h2>

<blockquote><p>Here I didn&rsquo;t remember to do everything I had intended, when I actually got around to writing a particular part of the code.</p>

<p>我忘记了一些本应完成的事情，比如说我知道这段代码应该写但我忘了写。</p></blockquote>

<h3>案例</h3>

<h4>烫烫烫烫烫</h4>

<p>C语言中忘记初始化数组，从而输出喜闻乐见的“烫烫烫烫烫烫烫烫烫烫烫烫”。</p>

<p><img src="http://i.imgur.com/9RcLu2x.png" alt="烫烫烫烫烫烫" /></p>

<p>对于需要手动管理内存的语言（C/C++），忘记释放内存或忘记初始化内存都会导致各种奇诡的问题。</p>

<h4>过早优化</h4>

<p>在开发TEX时，Knuth试图去优化<code>get_next</code>这个被频繁调用的函数。经过一番思考，Knuth认为<code>cur_cs = 0</code>这段代码是不必要的，于是他将这段代码删除，代码依然"正常"运行。然而过了一段时间后Knuth发现TEX在处理对齐（Alignment）时有时会出现问题——经过一番调试，Knuth发现原来那段被删除的代码是必要的（necessary）。</p>

<p>郁闷之余，Knuth援引了那句著名的话（Hoare&rsquo;s dictum）——过早优化是万恶之源（Premature optimization is the root of all evil in programming），很多书都以为这句话是Knuth说的，实际上它属于<a href="http://en.wikipedia.org/wiki/C._A._R._Hoare">Tony Hoare</a>。</p>

<h3>诱因</h3>

<h4>远距离操作</h4>

<p>远距离操作指那些间隔特别长的操作，例如下面的代码：</p>

<p><code>
obj.Init()
obj.DoSomething()
// Hundred of lines
obj.DoSomething()
obj.Close()
</code></p>

<p>从<code>Init</code>到<code>Close</code>的距离过远，在编写了几十甚至上百行其它代码之后，很容易漏掉<code>obj.Close()</code>从而导致资源泄漏。</p>

<h4>贸然修改代码</h4>

<p>我个人认为Knuth所犯的错误不在于过早优化，而在于他在对代码理解不充分的情况下就去贸然修改——这往往会带来各种问题。</p>

<h3>应对</h3>

<ul>
<li>避免远距离操作：

<ul>
<li>对于内存管理：C++提供了智能指针。</li>
<li>多数编程语言提供了上下文管理器（Context Manager）：例如Java 7的<code>try</code>，C#的<code>using</code>，以及Python的<code>with</code>，利用这些机制，可以有效的减少远距离操作，比如前文的代码用Python可以这么写：</li>
</ul>
</li>
</ul>


<p><code>python
with Obj.Init() as obj:
  obj.DoSomething()
  // Hundred of lines
  obj.DoSomething()
</code></p>

<ul>
<li> 整理代码段落，避免复杂交织的逻辑，这里可以参考<a href="http://www.amazon.com/The-Readable-Code-Theory-Practice/dp/0596802293">The Art of Readable Code</a>对Aesthetics的定义。</li>
</ul>


<p><img class="right <a" src="href="http://i.imgur.com/Mvr8zx2.jpg">http://i.imgur.com/Mvr8zx2.jpg</a>" width="180" height="250" title="Working Effectively with Legacy Code" ></p>

<ul>
<li><p>不要贸然修改代码：</p>

<ul>
<li>修改代码前要确保充分理解代码的原理，以及修改会带来的影响（Effect Analysis）。</li>
<li>修改代码后要保证被修改的部分得到测试，<a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/">Working Effectively with Legacy Code</a>提供了很多优秀的修改实践。</li>
</ul>
</li>
<li><p>代码审查：代码审查可以有效的控制编程差错。</p></li>
<li>不要在混沌状态提交代码。</li>
</ul>


<h2>言非所指（a language liability）</h2>

<blockquote><p>Here I misused or misunderstood the programming language or system hardware I was working with.</p>

<p>我对编程语言（或是系统硬件）理解有误，从而造成错误。</p></blockquote>

<h3>案例</h3>

<h4>JavaScript</h4>

<p>下面是JavaScript的真值表（源自Douglas Crockford）：</p>

<p><code>js
''        ==   '0'           // false
0         ==   ''            // true
0         ==   '0'           // true
false     ==   'false'       // false
false     ==   '0'           // true
false     ==   undefined     // false
false     ==   null          // false
null      ==   undefined     // true
" \t\r\n" ==   0             // true
</code></p>

<p>此外还有下面这个对比：</p>

<p><img src="http://i.imgur.com/5RCkNLK.jpg" alt="JavaScript the Good Parts" /></p>

<p>对于这种翔一样的语言，想不掉进坑里是非常困难的。</p>

<p>（讽刺的是，JavaScript统治了浏览器端，而且它还试图染指服务器端。）</p>

<h4>操作符优先级</h4>

<p><img class="right <a" src="href="http://i.imgur.com/5WjUpyd.jpg">http://i.imgur.com/5WjUpyd.jpg</a>" width="160" height="200" title="the Practice of Programming" ></p>

<p>[Brian Kernighan]曾在在<a href="http://cm.bell-labs.com/cm/cs/tpop/index.html">the Practice of Programming</a>中提到<code>if (x &amp; MASK == BITS)</code>这个例子：</p>

<p>我们一般会把<code>if (x &amp; MASK == BITS)</code>理解为<code>if ((x &amp; MASK) == BITS)</code>；</p>

<p>但实际上<code>if (x &amp; MASK == BITS)</code>和<code>if (x &amp; (MASK == BITS))</code>等价，而这显然不是我们想要的结果。</p>

<h3>诱因</h3>

<ul>
<li>对编程语言不够了解。</li>
<li>编程语言本身设计有问题。</li>
<li>对操作符优先级理解不足。</li>
</ul>


<h5>应对</h5>

<ul>
<li>深入理解编程语言——知道哪有坑：

<ul>
<li>学习编程语言不只是学它的语法——还要学习它的用法（Usages），最佳实践（Best Practices），误区（Traps），惯例（Conventions）和风格（Styles）等等，阅读<em>Effective</em>、<em>More Effective</em>、<em>Exceptional</em>、<em>More Exceptional</em>、<em>Pitfalls/Traps</em>和<em>the Good Parts</em>等系列的编程书籍以了解这些内容。</li>
<li><a href="http://joearms.github.io/">Joe Armstrong</a>在<a href="http://codersatwork.com/">Coders at work</a>的访谈中提到学习编程语言最好的方式是实现它（“The best way to learn a programming language is to implement it yourself”），我尝试用这种方法学习JavaScript，效果还不错。</li>
</ul>
</li>
<li>使用且仅使用语言的良子集——避开那些坑：

<ul>
<li><a href="http://crockford.com/">Douglas Crockford</a>在<a href="http://www.amazon.com/exec/obidos/ASIN/0596517742/">JavaScript: the Good Parts</a>中仅仅摘取了一个很小的JavaScript良子集进行编程，Kernighan和Plauger在<a href="http://www.amazon.com/Software-Tools-Brian-W-Kernighan/dp/020103669X/">Software Tools</a>则扩展了Fortran的一个良子集进行编程。语言提供的特性不代表你必须要使用它，容易产生错误（Error Prone）的语言特性应当被禁用。</li>
</ul>
</li>
<li>使用括号明确（Explicitify）操作符优先级——哪怕你能一眼看出<code>return true || true &amp;&amp; false</code>的返回值。</li>
<li>谨慎使用宏（macro）。</li>
<li>代码审查：提交代码之前至少需要一个该精通语言的人的审查，以免踩进语言的坑里。</li>
</ul>


<h2>事与愿违（a mismatch between modules）</h2>

<blockquote><p>Here I forgot the conventions I had built into a subroutine when I actually got around to using that subroutine.</p>

<p>我忘了我自己编写的例程（或函数）的正确用法，以至于调用它们时出现问题。</p></blockquote>

<h3>案例</h3>

<h4>火星探测器坠毁</h4>

<p>史上最贵的<strong>事与愿违</strong>的Bug出现在1998年的NASA火星探测器中，这个Bug直接导致火星探测器坠毁，损失高达<a href="http://www.computerworld.com/s/article/9183580/Epic_failures_11_infamous_software_bugs">3.27亿美元</a>。</p>

<p>而这个Bug的成因在我们看来实际很可笑——Lockheed Martin公司在<a href="http://www.jpl.nasa.gov/news/releases/99/mcoloss1.html">调查</a>后发现，由于不同开发团队使用的计量单位不同——一个团队使用英制单位（英寸，英尺或英镑等），而其它开发团队使用公制（厘米或公斤等），从而导致系统运算错误，最终导致探测器坠毁。</p>

<h4>愚蠢的API设计</h4>

<p>以前在Microsoft实习时，我曾经编写过一个动画方法，用于移动屏幕上某个控件，这个方法大概是下面这个样子：</p>

<p>```csharp
// Returns a DoubleAnimation which moves control from (x1, y1) to (x2, y2).
public DoubleAnimation CreateAnimation(Control control, int x1, int y1, int x2, int y2, double duration) {</p>

<pre><code>// Some code...
</code></pre>

<p>}
```</p>

<p><code>CreateAnimation</code>用于创建一个<code>DoubleAnimation</code>，把某个控件从<code>(x1, y1)</code>移动到<code>(x2, y2)</code>，移动耗时<code>duration</code>毫秒。</p>

<p>之后就出现了下面一系列翔一般的代码：</p>

<p><code>csharp
var gridAnimation1 = CreateAnimation(grid1, grid1.X, grid1.Y, 480, 0, 500);
var gridAnimation2 = CreateAnimation(grid2, grid2.X, grid2.Y, 0, 0, 500);
var popUpAnimation = CreateAnimation(popUp, 0, -320, 0, 320, 500);
</code></p>

<p>以及误用（组员（包括我自己）把<code>duration</code>当成秒来用）：</p>

<p><code>csharp
var gridAnimation1 = CreateAnimation(grid1, 480, 800, 480, 0, 0.5);
</code></p>

<p>这个方法如同<strong>病毒</strong>一般，既使得调用代码变的丑陋不堪，同时带来了各种Bug，导致后来的维护者叫苦不迭，</p>

<p>现在回想下，我肯定不会把它设计成这副模样——一种方法是使用<a href="http://en.wikipedia.org/wiki/Fluent_interface">Fluent Interface</a>，例如：</p>

<p><code>csharp
var gridAnimation = grid.FromCurrentPosition().MoveTo(x: 0, y: 0).InMilliSeconds(500);
var popUpAnimation = popUp.From(x: 0, y: -320).MoveTo(x: 0, y: 320).InMilliSeconds(500);
</code></p>

<p>从而使代码简洁明确。</p>

<h3>诱因</h3>

<p><strong>事与愿违</strong>源于糟糕的设计——人会犯错误，而糟糕的设计会大大加剧错误几率。</p>

<p><img class="right <a" src="href="http://i.imgur.com/jdeK9F0.jpg">http://i.imgur.com/jdeK9F0.jpg</a>" width="270" height="270" title="Tony Hoare" ></p>

<p>然而良好的设计非常困难——<a href="http://en.wikipedia.org/wiki/C._A._R._Hoare">Tony Hoare</a>曾在他的图灵奖获奖感言（<a href="http://zoo.cs.yale.edu/classes/cs422/2014/bib/hoare81emperor.pdf">The Emperor&rsquo;s Old Clothes</a>）中指出：</p>

<blockquote><p>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.</p></blockquote>

<h3>应对</h3>

<p>尽管Knuth把<strong>事与愿违</strong>归类为简单的差错，但我并不这么认为。<strong>事与愿违</strong>源于错误的设计，解决<strong>事与愿违</strong>的关键不在于修复其造成的差错，而在于处理造成<strong>事与愿违</strong>原因。修复<strong>事与愿违</strong>的错误很简单，但处理<strong>事与愿违</strong>的原因就复杂多了。</p>

<p><img class="right <a" src="href="http://i.imgur.com/tll1S89.jpg">http://i.imgur.com/tll1S89.jpg</a>" width="180" height="240" title="Awaken the Giant Within" ></p>

<p><a href="http://www.tonyrobbins.com/">Tony Robbins</a>曾在<a href="http://www.amazon.com/Awaken-Giant-Within-Immediate-Emotional/dp/0671791540/">Awaken the Giant Within</a>一书中讲了这样一个故事：</p>

<blockquote><p>一个医生在河边发现有一个人溺水，然后她跳进河里，把溺水者救上岸进行抢救。然而没过多久她又听到呼救声，她继续跳进河里，把溺水者救上岸抢救，然后她又听到求救，于是她又跳进河里…… 不幸的是，这名医生忙于抢救眼前的溺水者，而没有时间去上游查看是谁把这些人扔到水里的。</p></blockquote>

<p><img class="right <a" src="href="http://i.imgur.com/t5zjiGY.jpg">http://i.imgur.com/t5zjiGY.jpg</a>" width="180" height="240" title="Stream Analysis" ></p>

<p><a href="http://www.jerryporras.com/">Jerry Porras</a>也在<a href="http://www.amazon.com/Stream-Analysis-Organizational-Addison-Wesley-Organization/dp/0201056933/">Stream Analysis</a>中提到：</p>

<blockquote><p>People, especially people in organizations, tend to work on getting rid of symptoms, rather than solving the real problems.</p></blockquote>

<p>因此，处理<strong>事与愿违</strong>要从设计着手（Solving the real problems），这里从设计者和使用者两个角度出发：</p>

<h4>设计者</h4>

<ol>
<li>谨慎设计API：

<ul>
<li>API应该由经验丰富的人设计。</li>
<li>API设计应遵循一定的原则，<a href="http://en.wikipedia.org/wiki/Joshua_Bloch">Josha Bloch</a>曾在Google做过一个非常出色的关于API设计的演讲：<a href="https://www.youtube.com/watch?v=aAb7hSCtvGw">How To Design A Good API and Why it Matters</a>。</li>
<li>API在投入使用前应进行可用性测试——糟糕的API不仅会降低开发效率，还会像病毒一般引入各种各样的差错。</li>
</ul>
</li>
<li>利用类型系统：

<ul>
<li>避免基本类型（Primitive Type）：对于有意义的数据，使用其类型而非基本类型。例如：使用<code>Money</code>表示金钱，而非使用<code>double</code>。</li>
<li>避免使用动态语言（例如Python和Ruby）构建大型系统：动态语言的作用仅限于快速开发原型系统，在我看来，动态语言像是纸和胶水，可以用它们快速构建一些玩具模型（原型系统），但用它们建造摩天大厦（大型系统）就太离谱了。</li>
</ul>
</li>
<li>设计文档+审查：软件设计在实现前应有详细的设计文档（Design Document），并至少通过两名以上经验丰富的开发者的审查。</li>
</ol>


<h4>使用者</h4>

<p><img class="right <a" src="href="http://i.imgur.com/3vIYjeg.jpg">http://i.imgur.com/3vIYjeg.jpg</a>" width="180" height="240" title="Debugging" ></p>

<ol>
<li>仔细阅读文档——Read the manual, and read everything, cover to cover，参见<a href="http://www.amazon.com/Debugging-Indispensable-Software-Hardware-Problems/dp/0814474578/">Debugging: The 9 Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems</a>里的第一条调试原则——<strong>Understand the system</strong>。</li>
<li>调用API时仔细阅读其样例代码（Sample Code）和文档说明，不要想当然。</li>
<li>对于已有（Existing）的糟糕API，考虑对其进行封装（Wrapping），以免接下来的误用。</li>
<li>单元测试：编写单元测试，保证代码覆盖，确保一段代码都按期望的方式执行。</li>
<li>代码审查：代码审查可以有效的控制编程差错。</li>
</ol>


<p>关于"简单"的编程差错就介绍到这里，下篇将介绍源自算法和数据结构的错误——Algorithm + Data Structures &ndash;> Programming。</p>

<p>——未完待续</p>

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-2/">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程错误的思考——1. A Taxonomy of Programming Errors]]></title>
    <link href="http://zh.lucida.me/blog/on-programming-errors-1/"/>
    <updated>2014-06-24T23:32:12+01:00</updated>
    <id>http://zh.lucida.me/blog/on-programming-errors-1</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-1/">原文链接</a></p>

<h2>概要</h2>

<p><strong>关于编程错误的思考</strong>是一个博文系列，我试图通过结合<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对编程错误的分类以及自己的编程经验，对常见的编程错误、以及如何控制和预防这些错误进行介绍。</p>

<ol>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-0/">Knuth, TEX, and the Errors of TEX</a></li>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-1/">A Taxonomy of Programming Errors</a></li>
<li>Blunders, Typos, Mismatches, and Language Liability</li>
<li>Algorithm + Data Structures &ndash;> Programming</li>
<li>Robustness and Surprise</li>
<li>On Enhancing Existing Systems</li>
<li>Epilogue</li>
</ol>


<h2>编程错误的分类</h2>

<p>前文讲到Knuth在开发TEX的过程中遇到了各式各样的差错，为了理解并控制编程错误，Knuth将这些错误整理到<a href="http://texdoc.net/texmf-dist/doc/generic/knuth/errata/errorlog.pdf">记录日志</a>，并将这些差错分为15类。为了引用方便，我将它们翻译成中文。</p>

<p>注意：</p>

<ol>
<li>为了引用方便，Knuth使用英文首字母指代各个编程错误的分类，出于同样的原因，我将这些分类一一翻译为成语。</li>
<li>保留原文，以便读者理解，以免信息丢失。</li>
<li>原文中的"my"和"I"以及译文中的"我"均指Knuth本人。</li>
<li>如果认为翻译不靠谱请在评论中指出 :)</li>
</ol>


<p>下面是Knuth对TEX错误的分类：</p>

<!-- more -->


<hr />

<ul>
<li><strong>A: an algorithm awry.</strong> Here my original method proved to be incorrect or inadequate.</li>
<li><strong>不可胜算</strong>：我最初设想的算法有误或存在不足。</li>
</ul>


<hr />

<ul>
<li><strong>B: a blunder or botch.</strong> Here I knew what I ought to do, but I wrote something else that was syntactically correct&mdash;sort of a mental typo.</li>
<li><strong>鬼使神差</strong>：我知道这段代码该怎么写，但我糊里糊涂写了另外一段出来而且还能通过编译。</li>
</ul>


<hr />

<ul>
<li><strong>C: a cleanup for consistency or clarity.</strong> Here I changed the rules of the language to make things easier to remember and/or more logical.</li>
<li><strong>得心应手</strong>：我对语言（TEX）规则进行整理，使其符合逻辑，更加易用。</li>
</ul>


<hr />

<ul>
<li><strong>D: a data structure debacle.</strong> Here I didn&rsquo;t properly update the representation of information to preserve the appropriate invariants.</li>
<li><strong>差之毫厘</strong>：我对数据结构的操作有误，使其处在不一致的状态（破坏了其本应维持的不变式）。</li>
</ul>


<hr />

<ul>
<li><strong>E: an efficiency enhancement.</strong> Here I changed the program so that it would run faster; the existing code was correct but slow.</li>
<li><strong>多快好省</strong>：尽管原来的代码正确，但速度很慢，于是我修改代码以改善程序的性能。</li>
</ul>


<hr />

<ul>
<li><strong>F: a forgotten function.</strong> Here I didn&rsquo;t remember to do everything I had intended, when I actually got around to writing a particular part of the code.</li>
<li><strong>丢三落四</strong>：我忘记了一些本应完成的事情，比如说我知道这段代码应该写但我忘了写。</li>
</ul>


<hr />

<ul>
<li><strong>G: a generalization or growth of ability.</strong> Here I realized that some extension of the existing specifications was desirable.</li>
<li><strong>虚怀若谷</strong>：我将一些已有的代码进行扩展/抽象使其更加通用。</li>
</ul>


<hr />

<ul>
<li><strong>I: an interactive improvement.</strong> Here I made TEX respond better to the user&rsquo;s needs.</li>
<li><strong>各得其所</strong>：我使TEX对用户更加友好。</li>
</ul>


<hr />

<ul>
<li><strong>L: a language liability.</strong> Here I misused or misunderstood the programming language or system hardware I was working with.</li>
<li><strong>言非所指</strong>：我对编程语言（或是系统硬件）理解有误，从而造成错误。</li>
</ul>


<hr />

<ul>
<li><strong>M: a mismatch between modules.</strong> Here I forgot the conventions I had built into a subroutine when I actually got around to using that subroutine.</li>
<li><strong>事与愿违</strong>：我忘了我自己编写的例程（或函数）的正确用法，以至于调用它们时出现问题。</li>
</ul>


<hr />

<ul>
<li><strong>P: a promotion of portability.</strong> Here I changed the organization or documentation of the program; this affected only a person who would try to read or modify the code, not a person who tried to run it.</li>
<li><strong>焕然一新</strong>：我对程序的结构或是文档进行改善，从而在不改变程序的前提下改善其可读性和可修改性。</li>
</ul>


<hr />

<ul>
<li><strong>Q: a quest for quality.</strong> Here I changed the specifications of what the program should output from given input, when I learned how to improve the typographic appearance of the output.</li>
<li><strong>精益求精</strong>：在对字体版式有了更深入的理解之后，我对程序进行修改，以获得更好的输出效果。</li>
</ul>


<hr />

<ul>
<li><strong>R: a reinforcement of robustness.</strong> Whenever I realized that TEX could loop or crash in the presence of certain erroneous input, I tried to make the code bulletproof.</li>
<li><strong>百毒不侵</strong>：一旦我意识到TEX有可能在极端情况下崩溃，我就会想方设法使程序变的更加健壮。</li>
</ul>


<hr />

<ul>
<li><strong>S: a surprising scenario.</strong> Errors of type S were particularly bad bugs that forced me to change my original ideas, because of unforeseen interactions between various parts of the program.</li>
<li><strong>出乎意料</strong>：由于我最初对问题的定义或是对程序间模块的交互理解不足，导致一些无法预见的错误——这类错误往往很棘手。</li>
</ul>


<hr />

<ul>
<li><strong>T: a trivial typo.</strong> Sometimes I did&rsquo;t type the right thing when I entered the program into the computer, although my original pencil draft was correct.</li>
<li><strong>粗心大意</strong>：我在打字时会犯一些小错，以至我纸上的草稿是对的，但敲进去的是错的。</li>
</ul>


<hr />

<h2>进一步的分类</h2>

<h3>Knuth随后将这15个分类分为两大类：</h3>

<ul>
<li><strong>不可胜算</strong>、<strong>鬼使神差</strong>、<strong>差之毫厘</strong>、<strong>丢三落四</strong>、<strong>言非所指</strong>、<strong>事与愿违</strong>、<strong>百毒不侵</strong>、<strong>出乎意料</strong>和<strong>粗心大意</strong>属于程序的差错（Bugs）。</li>
<li><strong>得心应手</strong>、<strong>多快好省</strong>、<strong>虚怀若谷</strong>、<strong>各得其所</strong>、<strong>焕然一新</strong>和<strong>精益求精</strong>属于对程序的改进（Enhancements）。</li>
</ul>


<h3>然后按复杂程度把差错（Bugs）分为三类：</h3>

<h4>简单的差错</h4>

<ul>
<li><strong>粗心大意</strong>：敲错了代码。</li>
<li><strong>鬼使神差</strong>：敲串了代码。</li>
<li><strong>丢三落四</strong>：忘敲了代码。</li>
<li><strong>言非所指</strong>：踩语言的坑。</li>
<li><strong>事与愿违</strong>：中自己的坑。</li>
</ul>


<h4>复杂的差错</h4>

<ul>
<li><strong>不可胜算</strong>：算法设计不当。</li>
<li><strong>差之毫厘</strong>：数据结构维护不周。</li>
</ul>


<h4>棘手的差错</h4>

<ul>
<li><strong>百毒不侵</strong>：对错误输入处理不当而造成的问题。</li>
<li><strong>出乎意料</strong>：由于对问题的理解不足，从而导致各种诡异的问题。</li>
</ul>


<h2><a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>的不足</h2>

<p>Knuth在<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对TEX的错误进行了详细的分析，并对这些错误进行了系统的分类，但我认为这篇文章仍有一些不足：</p>

<ol>
<li>Knuth并未对编程错误给出应对策略。</li>
<li><a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>一文成于1989年，其中记载的是1978年至1982年Knuth开发TEX时碰到的各种问题——30年前的编程语言和现在严重脱节。</li>
</ol>


<p>所以，我打算（不自量力的）结合自己的经验，在Knuth的分析基础上再进一步——从下篇开始，我会为每一类编程错误给出其案例，诱因和应对策略。</p>

<p>——未完待续</p>

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-1/">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程错误的思考——0. Knuth, Tex, and the Errors of TEX]]></title>
    <link href="http://zh.lucida.me/blog/on-programming-errors-0/"/>
    <updated>2014-06-23T23:14:42+01:00</updated>
    <id>http://zh.lucida.me/blog/on-programming-errors-0</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-0/">原文链接</a></p>

<h2>概要</h2>

<p><strong>关于编程错误的思考</strong>是一个博文系列，我试图通过结合<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对编程错误的分类以及自己的编程经验，对常见的编程错误、以及如何控制和预防这些错误进行介绍。</p>

<p>原本我计划在一篇文章完成所有内容，然而随着写作的深入，我发现文章的篇幅越来越长——考虑到可读性，我决定将这篇文章拓展为一个系列，计划如下：</p>

<ol>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-0/">Knuth, TEX, and the Errors of TEX</a></li>
<li>A Taxonomy of Programming Errors</li>
<li>Blunders, Typos, Mismatches, and Language Liability</li>
<li>Algorithm + Data Structures &ndash;> Programming</li>
<li>Robustness and Surprise</li>
<li>On Enhancing Existing Systems</li>
<li>Epilogue</li>
</ol>


<!-- more -->


<h2>免责声明（Disclaimer）</h2>

<p>几天前我在知乎上读到一篇关于Swift的<a href="http://www.zhihu.com/question/24002984">讨论</a>：</p>

<p>胡搅蛮缠</p>

<p><img src="http://i.imgur.com/ezV72EP.png" alt="讨论1" /></p>

<p>无知者无畏</p>

<p><img src="http://i.imgur.com/XXo9TlC.png" alt="讨论2" /></p>

<p>为了避免无谓的讨论，如果您认为iPhone系统闹钟可以用200行代码搞定，或者觉着Python适合编写大型项目，那么这个系列不适合您阅读。</p>

<h2>编程错误（Programming Errors）</h2>

<p>作为软件开发者，我自己写过一些微型程序（500行左右）和一些中小型应用（5'000~20'000行），实习时做过一些小项目（2'000行左右），到现在参与大型项目（100'000行以上）。如果让我总结这些项目的共同点，那么就是我在这些项目里都犯了各式各样的错误——小到喜闻乐见的"烫烫烫烫烫烫烫烫"，大到破坏整个应用兼容性导致上千用户流失，有的错误很愚蠢，有的错误则是聪明反被聪明误。</p>

<p>不过我可以安慰自己，因为我并非孤独——计算机程序向来以错误百出而臭名昭著，以至于计算机先驱<a href="http://en.wikipedia.org/wiki/Grace_hopper">Grace Hopper</a>近乎自嘲的为计算机程序错误取了一个别名——Bug。在之后的六十余年，Bug和其衍生词Debug一直是了所有程序员的梦魇。</p>

<p>Grace Hopper发现的“Bug”</p>

<p><img src="http://i.imgur.com/m36RhHW.jpg" alt="第一个Bug" /></p>

<p>随着经验的累积，我隐隐感觉到这些编程错误有一定的规律，因为我开始发现一些错误似乎在哪里见过，于是我开始寻找这方面的书籍和文献，以控制/减少自己的编程错误。</p>

<blockquote><p>Those who cannot remember the past are condemned to repeat it.</p>

<p>George Santayana</p></blockquote>

<p>然后我找到了<a href="http://en.wikipedia.org/wiki/Donald_Knuth">Knuth</a>的<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>。</p>

<h2>the Errors of TEX</h2>

<h3>背景</h3>

<p><img src="http://i.imgur.com/UF1uTSy.jpg" alt="Knuth" /></p>

<p>相信任何学计算机的人都知道Knuth和他神话（或神化）般（的<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">TAOCP</a>七卷本（未完成），但对Knuth开发的TEX以及Knuth开发TEX的流程可能就不是那么了解了，所以我在这里简单介绍下。</p>

<p><img src="http://i.imgur.com/3HzERY5.jpg" alt="TAOCP" /></p>

<p>撰写并出版<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">TAOCP</a>前三卷之后，Knuth发现印刷排版烂的一逼，在没有好使的数字排版系统的情况下，Knuth决定自己搞一个出来——于是就有了TEX。</p>

<p><img src="http://i.imgur.com/e6FqiCM.jpg" alt="TEX" /></p>

<p>不过排版系统并非简单的（Trivial）系统，即便如Knuth此般异禀天赋，也无法从容应付——事实上Knuth在开发TEX的过程中遇到了大量的错误，这些错误从TEX初版（1978年）到<a href="http://tug.org/TUGboat/tb35-1/tb109knut.pdf">最近的一次性能调优</a>（2014年），源源不断，挥之不去。</p>

<p>这些错误让Knuth很头痛，为了理解并控制编程错误，Knuth将这些错误整理到记录日志，并对这些编程错误进行分类，这成为了<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>一文的基础。</p>

<h3>插曲</h3>

<p>Knuth开发TEX的流程在我等屌丝码农看来绝对匪夷所思，在<a href="http://www.codersatwork.com/">Coders at Work</a>一书对Knuth的访谈里，Knuth提到：</p>

<blockquote><p>When I wrote TeX originally in 1977 and ’78, of course I didn’t have literate programming but I did have structured programming. I wrote it in a big notebook in longhand, in pencil.</p>

<p>Six months later, after I had gone through the whole project, I started typing into the computer. And did the debugging in March of ’78 while I had started writing the program in October of ’77. The code for that is in the Stanford archives—it’s all in pencil—and of course I would come back and change a subroutine as I learned what it should be.</p></blockquote>

<p>尽管有可能是1978年还没有好用的交互编程环境（Interactive Programming Environment），但Knuth六个月纸上设计纸上写代码的开发方式仍可以说是编程史上的一朵奇葩。如果放到今天，Knuth一定会被各路敏捷极限TDD编程<em>高手</em>喷出翔。</p>

<p>插曲到此为止，下篇进入正题——编程错误的分类（A Taxonomy of Programming Errors）。</p>

<p>——未完待续</p>

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-0/">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[来自苹果的编程语言——Swift简介]]></title>
    <link href="http://zh.lucida.me/blog/an-introduction-to-swift/"/>
    <updated>2014-06-03T02:22:19+01:00</updated>
    <id>http://zh.lucida.me/blog/an-introduction-to-swift</id>
    <content type="html"><![CDATA[<h2>关于</h2>

<p>这篇文章简要介绍了苹果于<a href="https://developer.apple.com/wwdc/">WWDC 2014</a>发布的编程语言——Swift。</p>

<p>原文作者：</p>

<ul>
<li><a href="http://zh.lucida.me/">Lucida Blog</a></li>
<li><a href="http://www.weibo.com/pegong/">新浪微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p>转载前请保留出处链接，谢谢。</p>

<h2>前言</h2>

<p>在这里我认为有必要提一下<a href="http://worrydream.com/">Bret Victor</a>的<a href="http://vimeo.com/36579366">Inventing on Principle</a>，Swift编程环境的大部分概念都源自于<a href="http://worrydream.com/">Bret</a>这个演讲。</p>

<p>接下来进入正题。</p>

<h2>Swift是什么？</h2>

<p>Swift是苹果于WWDC 2014发布的编程语言，这里引用<strong><a href="https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11">The Swift Programming Language</a></strong>的原话：</p>

<blockquote><p>Swift is a new programming language for iOS and OS X apps that builds on the best of C and Objective-C, without the constraints of C compatibility.</p>

<p>Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible and more fun.</p>

<p>Swift&rsquo;s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to imagine how software development works.</p>

<p>Swift is the first industrial-quality systems programming language that is as expressive and enjoyable as a scripting language.</p></blockquote>

<p>简单的说：</p>

<ol>
<li>Swift用来写iOS和OS X程序。（估计也不会支持其它屌丝系统）</li>
<li>Swift吸取了C和Objective-C的优点，且更加强大易用。</li>
<li>Swift可以使用现有的Cocoa和Cocoa Touch框架。</li>
<li>Swift兼具编译语言的高性能（Performance）和脚本语言的交互性（Interactive）。</li>
</ol>


<h2>Swift语言概览</h2>

<!-- more -->


<h3>基本概念</h3>

<p>注：这一节的代码源自<strong><a href="https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11">The Swift Programming Language</a></strong>中的<em>A Swift Tour</em>。</p>

<h4>Hello, world</h4>

<p>类似于脚本语言，下面的代码即是一个完整的Swift程序。</p>

<p><code>csharp
println("Hello, world")
</code></p>

<h4>变量与常量</h4>

<p>Swift使用<code>var</code>声明变量，<code>let</code>声明常量。</p>

<p><code>csharp
var myVariable = 42
myVariable = 50
let myConstant = 42
</code></p>

<h4>类型推导</h4>

<p>Swift支持类型推导（Type Inference），所以上面的代码不需指定类型，如果需要指定类型：</p>

<p><code>csharp
let explicitDouble : Double = 70
</code></p>

<p>Swift不支持隐式类型转换（Implicitly casting），所以下面的代码需要显式类型转换（Explicitly casting）：</p>

<p><code>csharp
let label = "The width is "
let width = 94
let labelWidth = label + String(width)
</code></p>

<h4>字符串格式化</h4>

<p>Swift使用<code>\(item)</code>的形式进行字符串格式化：</p>

<p><code>csharp
let apples = 3
let oranges = 5
let appleSummary = "I have \(apples) apples."
let fruitSummary = "I have \(apples + oranges) pieces of fruit."
</code></p>

<h3>数组和字典</h3>

<p>Swift使用<code>[]</code>操作符声明数组（array）和字典（dictionary）：</p>

<p>```csharp
var shoppingList = [&ldquo;catfish&rdquo;, &ldquo;water&rdquo;, &ldquo;tulips&rdquo;, &ldquo;blue paint&rdquo;]
shoppingList[1] = &ldquo;bottle of water&rdquo;</p>

<p>var occupations = [</p>

<pre><code>"Malcolm": "Captain",
"Kaylee": "Mechanic",
</code></pre>

<p>]
occupations[&ldquo;Jayne&rdquo;] = &ldquo;Public Relations&rdquo;
```</p>

<p>一般使用初始化器（initializer）语法创建空数组和空字典：</p>

<p><code>csharp
let emptyArray = String[]()
let emptyDictionary = Dictionary&lt;String, Float&gt;()
</code></p>

<p>如果类型信息已知，则可以使用<code>[]</code>声明空数组，使用<code>[:]</code>声明空字典。</p>

<h3>控制流</h3>

<h4>概览</h4>

<p>Swift的条件语句包含<code>if</code>和<code>switch</code>，循环语句包含<code>for-in</code>、<code>for</code>、<code>while</code>和<code>do-while</code>，循环/判断条件不需要括号，但循环/判断体（body）必需括号：</p>

<p>```csharp
let individualScores = [75, 43, 103, 87, 12]
var teamScore = 0
for score in individualScores {</p>

<pre><code>if score &gt; 50 {
    teamScore += 3
} else {
    teamScore += 1
}
</code></pre>

<p>}
```</p>

<h4>可空类型</h4>

<p>结合<code>if</code>和<code>let</code>，可以方便的处理可空变量（nullable variable）。对于空值，需要在类型声明后添加<code>?</code>显式标明该类型可空。</p>

<p>```csharp
var optionalString: String? = &ldquo;Hello&rdquo;
optionalString == nil</p>

<p>var optionalName: String? = &ldquo;John Appleseed&rdquo;
var gretting = &ldquo;Hello!&rdquo;
if let name = optionalName {</p>

<pre><code>gretting = "Hello, \(name)"
</code></pre>

<p>}
```</p>

<h4>灵活的switch</h4>

<p>Swift中的<code>switch</code>支持各种各样的比较操作：</p>

<p>```csharp
let vegetable = &ldquo;red pepper&rdquo;
switch vegetable {
case &ldquo;celery&rdquo;:</p>

<pre><code>let vegetableComment = "Add some raisins and make ants on a log."
</code></pre>

<p>case &ldquo;cucumber&rdquo;, &ldquo;watercress&rdquo;:</p>

<pre><code>let vegetableComment = "That would make a good tea sandwich."
</code></pre>

<p>case let x where x.hasSuffix(&ldquo;pepper&rdquo;):</p>

<pre><code>let vegetableComment = "Is it a spicy \(x)?"
</code></pre>

<p>default:</p>

<pre><code>let vegetableComment = "Everything tastes good in soup."
</code></pre>

<p>}
```</p>

<h4>其它循环</h4>

<p><code>for-in</code>除了遍历数组也可以用来遍历字典：</p>

<p>```csharp
let interestingNumbers = [</p>

<pre><code>"Prime": [2, 3, 5, 7, 11, 13],
"Fibonacci": [1, 1, 2, 3, 5, 8],
"Square": [1, 4, 9, 16, 25],
</code></pre>

<p>]
var largest = 0
for (kind, numbers) in interestingNumbers {</p>

<pre><code>for number in numbers {
    if number &gt; largest {
        largest = number
    }
}
</code></pre>

<p>}
largest
```</p>

<p><code>while</code>循环和<code>do-while</code>循环：</p>

<p>```csharp
var n = 2
while n &lt; 100 {</p>

<pre><code>n = n * 2
</code></pre>

<p>}
n</p>

<p>var m = 2
do {</p>

<pre><code>m = m * 2
</code></pre>

<p>} while m &lt; 100
m
```</p>

<p>Swift支持传统的<code>for</code>循环，此外也可以通过结合<code>..</code>（生成一个区间）和<code>for-in</code>实现同样的逻辑。</p>

<p>```csharp
var firstForLoop = 0
for i in 0..3 {</p>

<pre><code>firstForLoop += i
</code></pre>

<p>}
firstForLoop</p>

<p>var secondForLoop = 0
for var i = 0; i &lt; 3; ++i {</p>

<pre><code>secondForLoop += 1
</code></pre>

<p>}
secondForLoop
```</p>

<p>注意：Swift除了<code>..</code>还有<code>...</code>：<code>..</code>生成前闭后开的区间，而<code>...</code>生成前闭后闭的区间。</p>

<h3>函数和闭包</h3>

<h4>函数</h4>

<p>Swift使用<code>func</code>关键字声明函数：</p>

<p>```csharp
func greet(name: String, day: String) &ndash;> String {</p>

<pre><code>return "Hello \(name), today is \(day)."
</code></pre>

<p>}
greet(&ldquo;Bob&rdquo;, &ldquo;Tuesday&rdquo;)
```</p>

<p>通过元组（Tuple）返回多个值：</p>

<p>```csharp
func getGasPrices() &ndash;> (Double, Double, Double) {</p>

<pre><code>return (3.59, 3.69, 3.79)
</code></pre>

<p>}
getGasPrices()
```</p>

<p>支持带有变长参数的函数：</p>

<p>```csharp
func sumOf(numbers: Int&hellip;) &ndash;> Int {</p>

<pre><code>var sum = 0
for number in numbers {
    sum += number
}
return sum
</code></pre>

<p>}
sumOf()
sumOf(42, 597, 12)
```</p>

<p>函数也可以嵌套函数：</p>

<p>```csharp
func returnFifteen() &ndash;> Int {</p>

<pre><code>var y = 10
func add() {
    y += 5
}
add()
return y
</code></pre>

<p>}
returnFifteen()
```</p>

<p>作为头等对象，函数既可以作为返回值，也可以作为参数传递：</p>

<p>```csharp
func makeIncrementer() &ndash;> (Int &ndash;> Int) {</p>

<pre><code>func addOne(number: Int) -&gt; Int {
    return 1 + number
}
return addOne
</code></pre>

<p>}
var increment = makeIncrementer()
increment(7)
```</p>

<p>```csharp
func hasAnyMatches(list: Int[], condition: Int &ndash;> Bool) &ndash;> Bool {</p>

<pre><code>for item in list {
    if condition(item) {
        return true
    }
}
return false
</code></pre>

<p>}
func lessThanTen(number: Int) &ndash;> Bool {</p>

<pre><code>return number &lt; 10
</code></pre>

<p>}
var numbers = [20, 19, 7, 12]
hasAnyMatches(numbers, lessThanTen)
```</p>

<h4>闭包</h4>

<p>本质来说，函数是特殊的闭包，Swift中可以利用<code>{}</code>声明匿名闭包：</p>

<p>```csharp
numbers.map({</p>

<pre><code>(number: Int) -&gt; Int in
let result = 3 * number
return result
})
</code></pre>

<p>```</p>

<p>当闭包的类型已知时，可以使用下面的简化写法：</p>

<p><code>csharp
numbers.map({ number in 3 * number })
</code></p>

<p>此外还可以通过参数的位置来使用参数，当函数最后一个参数是闭包时，可以使用下面的语法：</p>

<p><code>csharp
sort([1, 5, 3, 12, 2]) { $0 &gt; $1 }
</code></p>

<h3>类和对象</h3>

<h4>创建和使用类</h4>

<p>Swift使用<code>class</code>创建一个类，类可以包含字段和方法：</p>

<p>```csharp
class Shape {</p>

<pre><code>var numberOfSides = 0
func simpleDescription() -&gt; String {
    return "A shape with \(numberOfSides) sides."
}
</code></pre>

<p>}
```</p>

<p>创建<code>Shape</code>类的实例，并调用其字段和方法。</p>

<p><code>csharp
var shape = Shape()
shape.numberOfSides = 7
var shapeDescription = shape.simpleDescription()
</code></p>

<p>通过<code>init</code>构建对象，既可以使用<code>self</code>显式引用成员字段（<code>name</code>），也可以隐式引用（<code>numberOfSides</code>）。</p>

<p>```csharp
class NamedShape {</p>

<pre><code>var numberOfSides: Int = 0
var name: String

init(name: String) {
    self.name = name
}

func simpleDescription() -&gt; String {
    return "A shape with \(numberOfSides) sides."
}
</code></pre>

<p>}
```</p>

<p>使用<code>deinit</code>进行清理工作。</p>

<h4>继承和多态</h4>

<p>Swift支持继承和多态（<code>override</code>父类方法）：</p>

<p>```csharp
class Square: NamedShape {</p>

<pre><code>var sideLength: Double

init(sideLength: Double, name: String) {
    self.sideLength = sideLength
    super.init(name: name)
    numberOfSides = 4
}

func area() -&gt; Double {
    return sideLength * sideLength
}

override func simpleDescription() -&gt; String {
    return "A square with sides of length \(sideLength)."
}
</code></pre>

<p>}
let test = Square(sideLength: 5.2, name: &ldquo;my test square&rdquo;)
test.area()
test.simpleDescription()
```</p>

<p>注意：如果这里的<code>simpleDescription</code>方法没有被标识为<code>override</code>，则会引发编译错误。</p>

<h4>属性</h4>

<p>为了简化代码，Swift引入了属性（property），见下面的<code>perimeter</code>字段：</p>

<p>```csharp
class EquilateralTriangle: NamedShape {</p>

<pre><code>var sideLength: Double = 0.0

init(sideLength: Double, name: String) {
    self.sideLength = sideLength
    super.init(name: name)
    numberOfSides = 3
}

var perimeter: Double {
get {
    return 3.0 * sideLength
}
set {
    sideLength = newValue / 3.0
}
}

override func simpleDescription() -&gt; String {
    return "An equilateral triagle with sides of length \(sideLength)."
}
</code></pre>

<p>}
var triangle = EquilateralTriangle(sideLength: 3.1, name: &ldquo;a triangle&rdquo;)
triangle.perimeter
triangle.perimeter = 9.9
triangle.sideLength
```</p>

<p>注意：赋值器（setter）中，接收的值被自动命名为<code>newValue</code>。</p>

<h4>willSet和didSet</h4>

<p><code>EquilateralTriangle</code>的构造器进行了如下操作：</p>

<ol>
<li>为子类型的属性赋值。</li>
<li>调用父类型的构造器。</li>
<li>修改父类型的属性。</li>
</ol>


<p>如果不需要计算属性的值，但需要在赋值前后进行一些操作的话，使用<code>willSet</code>和<code>didSet</code>：</p>

<p>```csharp
class TriangleAndSquare {</p>

<pre><code>var triangle: EquilateralTriangle {
willSet {
    square.sideLength = newValue.sideLength
}
}
var square: Square {
willSet {
    triangle.sideLength = newValue.sideLength
}
}
init(size: Double, name: String) {
    square = Square(sideLength: size, name: name)
    triangle = EquilateralTriangle(sideLength: size, name: name)
}
</code></pre>

<p>}
var triangleAndSquare = TriangleAndSquare(size: 10, name: &ldquo;another test shape&rdquo;)
triangleAndSquare.square.sideLength
triangleAndSquare.square = Square(sideLength: 50, name: &ldquo;larger square&rdquo;)
triangleAndSquare.triangle.sideLength
```</p>

<p>从而保证<code>triangle</code>和<code>square</code>拥有相等的<code>sideLength</code>。</p>

<h4>调用方法</h4>

<p>Swift中，函数的参数名称只能在函数内部使用，但方法的参数名称除了在内部使用外还可以在外部使用（第一个参数除外），例如：</p>

<p>```csharp
class Counter {</p>

<pre><code>var count: Int = 0
func incrementBy(amount: Int, numberOfTimes times: Int) {
    count += amount * times
}
</code></pre>

<p>}
var counter = Counter()
counter.incrementBy(2, numberOfTimes: 7)
```</p>

<p>注意Swift支持为方法参数取别名：在上面的代码里，<code>numberOfTimes</code>面向外部，<code>times</code>面向内部。</p>

<h4>?的另一种用途</h4>

<p>使用可空值时，<code>?</code>可以出现在方法、属性或下标前面。如果<code>?</code>前的值为<code>nil</code>，那么<code>?</code>后面的表达式会被忽略，而原表达式直接返回<code>nil</code>，例如：</p>

<p><code>csharp
let optionalSquare: Square? = Square(sideLength: 2.5, name: "optional
square")
let sideLength = optionalSquare?.sideLength
</code>
当<code>optionalSquare</code>为<code>nil</code>时，<code>sideLength</code>属性调用会被忽略。</p>

<h3>枚举和结构</h3>

<h4>枚举</h4>

<p>使用<code>enum</code>创建枚举——注意Swift的枚举可以关联方法：</p>

<p>```csharp
enum Rank: Int {</p>

<pre><code>case Ace = 1
case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
case Jack, Queen, King
    func simpleDescription() -&gt; String {
    switch self {
        case .Ace:
            return "ace"
        case .Jack:
            return "jack"
        case .Queen:
            return "queen"
        case .King:
            return "king"
        default:
            return String(self.toRaw())
    }
}
</code></pre>

<p>}
let ace = Rank.Ace
let aceRawValue = ace.toRaw()
```</p>

<p>使用<code>toRaw</code>和<code>fromRaw</code>在原始（raw）数值和枚举值之间进行转换：
```csharp
if let convertedRank = Rank.fromRaw(3) {</p>

<pre><code>let threeDescription = convertedRank.simpleDescription()
</code></pre>

<p>}
```</p>

<p>注意枚举中的成员值（member value）是实际的值（actual value），和原始值（raw value）没有必然关联。</p>

<p>一些情况下枚举不存在有意义的原始值，这时可以直接忽略原始值：</p>

<p>```csharp
enum Suit {</p>

<pre><code>case Spades, Hearts, Diamonds, Clubs
    func simpleDescription() -&gt; String {
    switch self {
        case .Spades:
            return "spades"
        case .Hearts:
            return "hearts"
        case .Diamonds:
            return "diamonds"
        case .Clubs:
            return "clubs"
    }
}
</code></pre>

<p>}
let hearts = Suit.Hearts
let heartsDescription = hearts.simpleDescription()
```</p>

<p>除了可以关联方法，枚举还支持在其成员上关联值，同一枚举的不同成员可以有不同的关联的值：</p>

<p>```csharp
enum ServerResponse {</p>

<pre><code>case Result(String, String)
case Error(String)
</code></pre>

<p>}</p>

<p>let success = ServerResponse.Result(&ldquo;6:00 am&rdquo;, &ldquo;8:09 pm&rdquo;)
let failure = ServerResponse.Error(&ldquo;Out of cheese.&rdquo;)</p>

<p>switch success {</p>

<pre><code>case let .Result(sunrise, sunset):
    let serverResponse = "Sunrise is at \(sunrise) and sunset is at \(sunset)."
case let .Error(error):
    let serverResponse = "Failure... \(error)"
</code></pre>

<p>}
```</p>

<h4>结构</h4>

<p>Swift使用<code>struct</code>关键字创建结构。结构支持构造器和方法这些类的特性。结构和类的最大区别在于：结构的实例按值传递（passed by value），而类的实例按引用传递（passed by reference）。</p>

<p>```csharp
struct Card {</p>

<pre><code>var rank: Rank
var suit: Suit
func simpleDescription() -&gt; String {
    return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
}
</code></pre>

<p>}
let threeOfSpades = Card(rank: .Three, suit: .Spades)
let threeOfSpadesDescription = threeOfSpades.simpleDescription()
```</p>

<h3>协议（protocol）和扩展（extension）</h3>

<h4>协议</h4>

<p>Swift使用<code>protocol</code>定义协议：</p>

<p>```csharp
protocol ExampleProtocol {</p>

<pre><code>var simpleDescription: String { get }
mutating func adjust()
</code></pre>

<p>}
```</p>

<p>类型、枚举和结构都可以实现（adopt）协议：</p>

<p>```csharp
class SimpleClass: ExampleProtocol {</p>

<pre><code>var simpleDescription: String = "A very simple class."
var anotherProperty: Int = 69105
func adjust() {
    simpleDescription += " Now 100% adjusted."
}
</code></pre>

<p>}
var a = SimpleClass()
a.adjust()
let aDescription = a.simpleDescription</p>

<p>struct SimpleStructure: ExampleProtocol {</p>

<pre><code>var simpleDescription: String = "A simple structure"
mutating func adjust() {
    simpleDescription += " (adjusted)"
}
</code></pre>

<p>}
var b = SimpleStructure()
b.adjust()
let bDescription = b.simpleDescription
```</p>

<h4>扩展</h4>

<p>扩展用于在已有的类型上增加新的功能（比如新的方法或属性），Swift使用<code>extension</code>声明扩展：</p>

<p>```csharp
extension Int: ExampleProtocol {</p>

<pre><code>var simpleDescription: String {
    return "The number \(self)"
}
mutating func adjust() {
    self += 42
}
</code></pre>

<p>}
7.simpleDescription
```</p>

<h3>泛型（generics）</h3>

<p>Swift使用<code>&lt;&gt;</code>来声明泛型函数或泛型类型：</p>

<p>```csharp
func repeat<ItemType>(item: ItemType, times: Int) &ndash;> ItemType[] {</p>

<pre><code>var result = ItemType[]()
for i in 0..times {
    result += item
}
return result
</code></pre>

<p>}
repeat(&ldquo;knock&rdquo;, 4)
```</p>

<p>Swift也支持在类、枚举和结构中使用泛型：</p>

<p>```csharp
// Reimplement the Swift standard library&rsquo;s optional type
enum OptionalValue<T> {</p>

<pre><code>case None
case Some(T)
</code></pre>

<p>}
var possibleInteger: OptionalValue<Int> = .None
possibleInteger = .Some(100)
```</p>

<p>有时需要对泛型做一些需求（requirements），比如需求某个泛型类型实现某个接口或继承自某个特定类型、两个泛型类型属于同一个类型等等，Swift通过<code>where</code>描述这些需求：</p>

<p>```csharp
func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element: Equatable, T.GeneratorType.Element == U.GeneratorType.Element> (lhs: T, rhs: U) &ndash;> Bool {</p>

<pre><code>for lhsItem in lhs {
    for rhsItem in rhs {
        if lhsItem == rhsItem {
            return true
        }
    }
}
return false
</code></pre>

<p>}
anyCommonElements([1, 2, 3], [3])
```</p>

<p>Swift语言概览就到这里，有兴趣的朋友请进一步阅读<a href="">The Swift Programming Language</a>。</p>

<p>接下来聊聊个人对Swift的一些感受。</p>

<h2>个人感受</h2>

<p><strong>注意</strong>：下面的感受纯属个人意见，仅供参考。</p>

<h3>大杂烩</h3>

<p>尽管我接触Swift不足两小时，但很容易看出Swift吸收了大量其它编程语言中的元素，这些元素包括但不限于：</p>

<ol>
<li>属性（Property）、可空值（Nullable type）语法和泛型（Generic Type）语法源自C#。</li>
<li>格式风格与Go相仿（没有句末的分号，判断条件不需要括号）。</li>
<li>Python风格的当前实例引用语法（使用<code>self</code>）和列表字典声明语法。</li>
<li>Haskell风格的区间声明语法（比如<code>1..3</code>，<code>1...3</code>）。</li>
<li>协议和扩展源自Objective-C（自家产品随便用）。</li>
<li>枚举类型很像Java（可以拥有成员或方法）。</li>
<li><code>class</code>和<code>struct</code>的概念和C#极其相似。</li>
</ol>


<p>注意这里不是说Swift是抄袭——实际上编程语言能玩的花样基本就这些，况且Swift选的都是在我看来相当不错的特性。</p>

<p>而且，这个大杂烩有一个好处——就是任何其它编程语言的开发者都不会觉得Swift很陌生——这一点很重要。</p>

<h3>拒绝隐式（Refuse implicity）</h3>

<p>Swift去除了一些隐式操作，比如隐式类型转换和隐式方法重载这两个坑，干的漂亮。</p>

<h3>Swift的应用方向</h3>

<p>我认为Swift主要有下面这两个应用方向：</p>

<h4>教育</h4>

<p>我指的是编程教育。现有编程语言最大的问题就是交互性奇差，从而导致学习曲线陡峭。相信Swift及其交互性极强的编程环境能够打破这个局面，让更多的人——尤其是青少年，学会编程。</p>

<p>这里有必要再次提到<a href="http://worrydream.com/">Bret Victor</a>的<a href="http://vimeo.com/36579366">Inventing on Principle</a>，看了这个视频你就会明白一个交互性强的编程环境能够带来什么。</p>

<h4>应用开发</h4>

<p>现有的iOS和OS X应用开发均使用Objective-C，而Objective-C是一门及其繁琐（verbose）且学习曲线比较陡峭的语言，如果Swift能够提供一个同现有Obj-C框架的简易互操作接口，我相信会有大量的程序员转投Swift；与此同时，Swift简易的语法也会带来相当数量的其它平台开发者。</p>

<p>总之，上一次某家大公司大张旗鼓的推出一门编程语言及其编程平台还是在2000年（微软推出C#），将近15年之后，苹果推出Swift——作为开发者，我很高兴能够见证一门编程语言的诞生。</p>

<p>以上。</p>

<p>原文作者：</p>

<ul>
<li><a href="http://zh.lucida.me/">Lucida Blog</a></li>
<li><a href="http://www.weibo.com/pegong/">新浪微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p>转载前请保留出处链接，谢谢。</p>
]]></content>
  </entry>
  
</feed>
