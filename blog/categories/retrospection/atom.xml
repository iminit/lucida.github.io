<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Retrospection | Lucida]]></title>
  <link href="http://zh.lucida.me/blog/categories/retrospection/atom.xml" rel="self"/>
  <link href="http://zh.lucida.me/"/>
  <updated>2015-01-01T00:33:24-08:00</updated>
  <id>http://zh.lucida.me/</id>
  <author>
    <name><![CDATA[Lucida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[程序员英语学习指引]]></title>
    <link href="http://zh.lucida.me/blog/english-for-programmers/"/>
    <updated>2015-01-01T00:04:51-08:00</updated>
    <id>http://zh.lucida.me/blog/english-for-programmers</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/english-for-programmers/">http://zh.lucida.me/blog/english-for-programmers/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>

<h2>概要</h2>

<p>这篇文章面向程序员，简要的介绍了一些学习计算机专业英语的步骤和经验。</p>

<h2>关于</h2>

<p>之前不少人曾站内我如何学习英语，我也曾试图写一篇如何学习英语的博文，但我现在的实力着实无法写出令人信服的文章：</p>

<ol>
<li>尽管阅读、写作和听力还可以，但口语很差——我指的是日常用语，即便出国一年，现在我和同事交流时仍然磕磕巴巴，不知道用什么词的情况经常出现；</li>
<li>尽管读过大量外文资料，但它们绝大多是计算机专业书籍和论文，并不适用于通用的英语学习，也不适用于其它专业。</li>
</ol>


<p>所以这篇文章并不是一篇通用的（General）英语学习教程——而是一篇面向国内开发者的计算机专业（为了简便，接下来的“专业”均指“计算机专业”）英语学习指引，本文集中于如下问题：</p>

<ul>
<li><a href="#why_english">为什么要学习英语？</a></li>
<li><a href="#how_to_read_from_scratch">如何从零开始阅读专业英文书籍？</a></li>
<li><a href="#how_to_improve_reading_skills">如何提升专业英语阅读能力？</a></li>
<li><a href="#how_to_improve_writing_skills">如何提升专业英语写作能力？</a></li>
<li><a href="#how_to_improve_listening_skills">如何提升英语听力？</a></li>
</ul>


<p>此外，我把简短的问答放在<a href="#miscellaneous">杂项</a>之中，以便阅读。</p>

<!-- more -->


<h2><a name="why_english">为什么要学习英语？</a></h2>

<p>这个问题很多人问过，也有很多人回答过，此外如果你在阅读这篇文章那么你应该已经意识到了学习英语的重要性。所以我不打算花太多篇幅在它上面，这里简略的总结下学习英语的好处：</p>

<ol>
<li>更多的高质量学习资源：首先，绝大多数高质量的计算机学习资源（书籍、论文、博文和视频等）都是英文；其次，高质量的中文计算机学习资源几乎为零；</li>
<li>无需忍受翻译带来的问题：

<ol>
<li>信息损耗：任何知识从一种语言翻译到另一种语言一定会有信息损耗，更何况是英文和中文这两种差别巨大的语言；</li>
<li>时效损耗：翻译需要时间，如果你读的是翻译版那么你已经至少落后了半年；</li>
<li>翻译损耗：国内的计算机书籍翻译水平参差不齐，你需要拼人品；</li>
</ol>
</li>
<li>编写更好的代码：良好的英语水平是编写可读（Readable）代码的前提；</li>
<li>翻墙：相对于其它专业，计算机专业出国工作要容易很多，但前提是你的英语要说的过去。</li>
</ol>


<h2><a name="how_to_read_from_scratch">如何从零开始阅读专业英文书籍？</a></h2>

<p>注意这里的零基础指的是专业英文书籍阅读零基础——而不是英语零基础，英语零基础就没啥好说的了 &ndash;_&ndash;#</p>

<p>刚开始阅读专业英文书籍时要记住一点：你的目标是<strong>提升计算机专业词汇量</strong>，而不是学习计算机专业知识。所以你要阅读的是计算机“通俗”读物或“科普”读物，我的计算机英文入门书籍是<a href="http://book.douban.com/subject/1880471/">计算机文化</a>（<a href="http://book.douban.com/subject/2376634/">New Perspectives on Computer Concepts</a>），这本书每年一版，现在已经出到<a href="http://www.amazon.com/Perspectives-Computer-Concepts-2014-Comprehensive/dp/1285096924/">第16版</a>：</p>

<p><img src="http://i.imgur.com/Uhke7OQ.jpg" alt="New Perspectives on Computer Concepts" /></p>

<p>这本书的好处在于它极其浅显易懂，并且包含大量计算机专业领域名词，所以读者可以专注于提升计算机专业词汇量，而不是一边查单词一边学新技术——同时搞两件事是很困难的。</p>

<p>顺便提一下那篇<a href="http://blog.jobbole.com/45296/">老码农教你学英语</a>和那个老码农推荐的<a href="http://blog.jobbole.com/45795/">书目</a>，姑且不论他把Mythical Man-month拼写成Man Month Myth，我非常惊讶他居然称人月神话原版为白话书并且推荐初学者阅读，直到看到这里：</p>

<p><img src="http://i.imgur.com/Scg0Egm.jpg" alt="WTF" /></p>

<p>这句<em>“另外两本也很不错，我很久以前看的翻译版，一直也想找原版的来看看，可惜总是没空，这次你们就算替我看了吧”</em>着实让我很无语，没看过的书也可以随便推荐么 &ndash;_&ndash;# 难怪那么多人推荐计算机程序设计艺术呢。</p>

<p>我在读研时从头至尾阅读了<a href="http://en.wikipedia.org/wiki/Fred_Brooks">Frederick Brooks</a>的<a href="http://en.wikipedia.org/wiki/The_Mythical_Man-Month">Mythical Man Month</a>以及他的几篇论文（No Silver Bullets和the Computer Scientist as Toolsmith），所以对Brooks的文风有一定了解——Brooks绝对是一位多才多艺的计算机科学大师——他的文字不仅涉及到计算机，还涉及到管理、人文、艺术、建筑和神学等学科。读他的书和文章，我查单词直接查到手抽，推荐初学者读这种书，你是要玩死初学者么 &ndash;_&ndash;#</p>

<h2><a name="how_to_improve_reading_skills">如何提升专业英语阅读能力？</a></h2>

<p>阅读<a href="http://www.amazon.com/Perspectives-Computer-Concepts-2014-Comprehensive/dp/1285096924/">New Perspectives on Computer Concepts</a>之后，你应该掌握了大量的计算机专业英文词汇，这时你可以尝试阅读一些语言浅显但主题相对深入的计算机科学基础书籍，个人力荐<a href="http://www.cs.princeton.edu/~bwk/">Brian W Kernighan</a>和<a href="http://www.cs.vu.nl/~ast/">Andrew S Tanenbaum</a>的作品，他们的著作不但本本经典，而且语言朴实：</p>

<ul>
<li><a href="http://www.amazon.com/The-Programming-Language-2nd-Edition/dp/0131103628/">The C Programming Language 2th</a>：不但是C语言的神作，而且为编程语言书籍的编写树立了新的标杆；</li>
<li><a href="http://www.amazon.com/gp/product/013937681X/">The Unix Programming Environment</a>：覆盖了Unix的设计思想，简洁易懂的Unix入门手册；</li>
<li><a href="http://www.amazon.com/Practice-Programming-Addison-Wesley-Professional-Computing/dp/020161586X/">The Practice of Programming</a>：两位Unix大师（<a href="http://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>和<a href="http://www.cs.princeton.edu/~bwk/">Brian Kernighan</a>）近三十年的编程经验尽在此书之中；</li>
<li><a href="http://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/">Algorithms 4th</a>：数据结构与算法入门；</li>
<li><a href="http://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/013359162X/">Modern Operating Systems 4th</a>：全面的操作系统概论；</li>
<li><a href="http://www.amazon.com/Computer-Networks-5th-Andrew-Tanenbaum/dp/0132126958/">Computer Networks 5th</a>：全面的计算机网络概论。</li>
</ul>


<p>这些书读完之后，你应该可以做到脱离字典阅读绝大多数的计算机书籍——是的，可能还会有一些生词，但不会影响阅读。</p>

<p>除了读书，阅读专业博客也是非常好的提升专业英语水平的途径。个人推荐下面几个网站：</p>

<ul>
<li><a href="https://news.ycombinator.com">Hacker News</a>：大量的技术资讯和博文；</li>
<li><a href="http://www.reddit.com">Reddit</a>：非常的聚合站点，我一般去下面几个频道（subreddit）

<ul>
<li><a href="http://www.reddit.com/r/programming/">/programming</a>：聚合了大量的优秀程序设计博文（其实不少国内技术站点就是搬运它的内容）；</li>
<li><a href="http://www.reddit.com/r/java/">/java</a>：大量的Java技术博文，质量不如<a href="http://www.reddit.com/r/programming/">/programming</a>，但也还说的过去；</li>
<li><a href="http://www.reddit.com/r/shittyprogramming/">/shittyprogramming</a>：悠闲时的去处，不少段子来自这里；</li>
</ul>
</li>
<li><a href="https://medium.com">Medium</a>：大量的高质量文章；</li>
<li><a href="http://www.quora.com">Quora</a>：大量的高质量问答，有不少中国人在上面练习英语；</li>
</ul>


<h2><a name="how_to_improve_writing_skills">如何提升英语写作能力？</a></h2>

<p>程序员学习英语不是为了写小说——而主要是如下场景：</p>

<ol>
<li>编写设计文档（Design Document）；</li>
<li>收发邮件，进行交流；</li>
<li>开发程序中的命名、注释等描述性内容。</li>
</ol>


<p>1和2需要Nonfiction Writing——言简意赅，层次分明。这方面的写作书籍我推荐：</p>

<p><img src="http://i.imgur.com/9EjJ7Cx.jpg" alt="the Elements Of Style" /></p>

<p><a href="http://www.amazon.com/Elements-Style-Fourth-William-Strunk/dp/020530902X/">the Elements Of Style</a>（这本书我应该推荐了无数次 &ndash;_&ndash;#</p>

<p><img src="http://i.imgur.com/B8Qwfur.jpg" alt="On Writing Well" /></p>

<p><a href="http://www.amazon.com/Writing-Well-30th-Anniversary-Nonfiction/dp/0060891548/">On Writing Well</a></p>

<p><img src="http://i.imgur.com/uO9p3nw.jpg" alt="中式英语之鉴" /></p>

<p>此外少不了<a href="http://book.douban.com/subject/1229822/">中式英语之鉴</a>，中式英语说说还成，写到纸面上就丢大发了。</p>

<p>关于3的书籍很多，我个人推荐<a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/">Code Complete</a>中关于命名（Naming）的一章，章名好像是the Power of Variable Names；以及<a href="http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/">Effective Java 2nd</a>的Item44——如何编写代码注释及文档。</p>

<h2><a name="how_to_improve_listening_skills">如何提升听力？</a></h2>

<p>阅读量达到一定程度听力也不会差，个人推荐<a href="http://channel9.msdn.com/">Channel 9</a>、<a href="https://www.youtube.com/user/GoogleTechTalks">Google Tech Talk</a>和<a href="https://www.coursera.org/">Coursera</a>，多看多听，此外务必不要中文字幕。</p>

<h2><a name="miscellaneous">杂项</a></h2>

<p>这里包含一些简短的问题，如果你有疑问也可以留言，我会把答案添加到这里。</p>

<h3>是否一定需要阅读原版？</h3>

<p>除非你阅读原版书籍和中文书籍一样顺畅，或者翻译书籍信息损失量太大，否则不需要刻意阅读原版。</p>

<h3>开发者需要多少单词量？</h3>

<p>没有标准答案。作为开发者，大词汇量不是必需，但一定要<strong>把词用对</strong>——尤其是动词。</p>

<p>以方法/函数名中经常出现的<code>get</code>为例：我们需要知道何时应该使用<code>get</code>，以及何时使用<code>fetch</code>、<code>build</code>、<code>retrieve</code>、<code>compute</code>、<code>calculate</code>和<code>receive</code>这些<code>get</code>的同类词汇。</p>

<h3>有没有好用的词典？</h3>

<p>目前我还没有发现一个好用的词典应用，所以依然在使用6年前的CASIO V2800H电子辞典。（略土 &ndash;_&ndash;#</p>

<p>以上。</p>

<hr />

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/english-for-programmers/">http://zh.lucida.me/blog/english-for-programmers/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回顾2014——还算不错的开端]]></title>
    <link href="http://zh.lucida.me/blog/2014-summary/"/>
    <updated>2014-12-26T14:51:50-08:00</updated>
    <id>http://zh.lucida.me/blog/2014-summary</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/2014-summary/">http://zh.lucida.me/blog/2014-summary/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>

<hr />

<h2>摘要</h2>

<p>这篇文章记录了我对2014年的回顾，包含一些感触，也有一些吐槽——这篇文章不会像之前的文章那么严谨——意识流——想到哪里——说到哪里。</p>

<ul>
<li><a href="#working">工作</a></li>
<li><a href="#travelling">出国</a></li>
<li><a href="#reading">读书</a></li>
<li><a href="#gaming">游戏</a></li>
<li><a href="#buying">败物</a></li>
<li><a href="#blogging">博客</a></li>
<li><a href="#planning">展望</a></li>
</ul>


<h2><a name="working">工作</a></h2>

<p>2014是我正式工作的第一年——工作对我既熟悉又陌生——在正式工作之前，我在大连<a href="http://www.avepoint.com.cn/">AvePoint</a>和<a href="http://www.microsoft.com/zh-cn/ard/default.aspx">微软亚洲工程院</a>分别有一年和两年的实习经历，大大小小的应用也写过不少；但我并未参与过正式的开发流程，实习时写的东西规模都很小（不超过1w行），技术含量也不高（没有教科书以外的算法），也没有一个资深的开发者手把手教我（基本都是自学瞎鼓捣）。简而言之——我属于<a href="http://www.mydrivingseat.com/the-blog/dabbler-obsessive-hacker-or-master/">Dabbler</a>——聊聊技术名词写几个小程序还可以，搞点正经东西就抓瞎。</p>

<p>所以2014年是我从<a href="http://www.mydrivingseat.com/the-blog/dabbler-obsessive-hacker-or-master/">Dabbler</a>走向<a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">Journeyman</a>的第一年，这一年我接触了很多真正的专业开发者（Professional Developer），也学到了很多书本中学不到的东西。</p>

<!-- more -->


<h3>专业开发者</h3>

<p>我提到我接触了很多真正的专业开发者，这里举一个例子：</p>

<p>刚刚开始工作时，我说的最多的一个短语就是"I think"——"我觉得XXX应该是YYY"</p>

<p>这时我就会被同事无情的打断——"You shouldn&rsquo;t think, you should be certain"</p>

<p>然后我就会羞愧苦逼的回去翻看文档，询问同事，直到彻底搞清楚问题为止——没有任何"I think"。</p>

<p>后来我读到<a href="http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073">Clean Coder</a>这本书，发现里面很多观点和我身边的同事的所作所为不谋而合——专业开发者——就应该是这样。</p>

<h3>代码审查</h3>

<p>Google内部提交代码必需要经过<a href="http://www.amazon.com/Google-Tests-Software-James-Whittaker/dp/0321803027">代码审查</a>——如果你要在某个目录下提交代码，你必须要获得来自代码审查者的两个Approval（准许）：Owner Approval（目录所有者的准许）和Readablity Approval（代码可读性准许），具体细节可以看这个Quora问答：<a href="http://www.quora.com/What-is-Googles-internal-code-review-policy-process">http://www.quora.com/What-is-Googles-internal-code-review-policy-process</a>。</p>

<p>在2014这一年，我的绝大多数开发知识/经验都来自代码审查——从刚开始写代码被别人“黑”的惨不忍睹，到之后慢慢可以越来越顺利的通过代码审查，再到之后获得Java Readablity（参考<a href="http://www.zhihu.com/question/19794858">C++ Readablity</a>），到现在天天审查别人的代码，这个过程我学到的开发经验比我在学校7年学到的都多。我相信在接下来的两三年我的开发经验也会来自代码审查。</p>

<p>代码审查有一个副作用——它会提升你的代码品位，使得你再也无法忍受糟糕的代码——就我个人的感受，国内技术社区90%以上的代码都是翔，5%以上的代码翔都不如——所以现在我很少看国内的技术文章。</p>

<h3>从编程到开发</h3>

<p>作为开发者，走出学校进入工作岗位最大的转变是从编程（<a href="http://en.wikipedia.org/wiki/Computer_programming">Programming</a>）转向开发（<a href="http://en.wikipedia.org/wiki/Software_development">Development</a>）——专注的不再是算法、数据结构或操作系统这些编程概念，而是产品质量、持续集成和领域知识等开发概念。</p>

<p>我并非否认计算机基础的重要性——这些基础知识是底线（Bottom line），这些东西都不会还写毛程序？作为开发者应该具备良好的编程基础，然后不断提升自己的开发技能，而不是不断的折腾算法和数据结构这些理应在学校掌握的东西。</p>

<h2><a name="travelling">出国</a></h2>

<p>之前从未想到过我会出国，然而误打误撞，2014年我先后在英国伦敦和美国加州湾区工作，见识了万恶的资本主义发源地，也见识了万恶的资本主义社会：</p>

<h2>伦敦</h2>

<p><img src="http://i.imgur.com/MiSMFrz.jpg" alt="伦敦鸟瞰" /></p>

<ol>
<li>英腔逼格很高，我努力学了一点，很受用；</li>
<li>美女很少，一般美女都来自东欧；</li>
<li>留学生很多，白富美富二代也很多；</li>
<li>常年阴雨连绵，但雨并不大；</li>
<li>英国人很绅士，坐地铁或公交时能明显体会到，不像国内那般争先恐后不守规矩；</li>
<li>贝克街221B是一个不存在的地址，我还特地去验证了一把；</li>
<li>东西很贵，貌似今年刚成为全球最贵城市；</li>
<li>是的，搞基很多，我曾在Green Park见过两名壮汉拍婚纱照；</li>
<li>只翻修不拆迁，所以伦敦街上的建筑大多都有三百年多历史，为什么不是四百年？因为当时<a href="http://en.wikipedia.org/wiki/Great_Fire_of_London">那把火</a>；</li>
<li>顺便推荐一条步行线路：London Eye俯瞰全景 &ndash;> Westminister Cathedral体验Big Ben &ndash;> Buckingham Palace观看"红卫兵" &ndash;> Picadilly Circus观看接头表演 &ndash;> Covent Garden购买手工艺品 &ndash;> Leicester Square吃中餐/日餐。</li>
</ol>


<h2>湾区</h2>

<p><img src="http://i.imgur.com/kkTeNns.jpg" alt="阳光屯小吃一条街" /></p>

<ol>
<li>美音很屌丝，也很容易懂；</li>
<li>美女很多，来历不明；</li>
<li>留学生没有码农多；</li>
<li>一年四季，阳光普照；</li>
<li>大多还不错，但不如英国人那般讲究；</li>
<li>是的，加州没有加州牛肉面；</li>
<li>物价尚可，房价涨的一逼；</li>
<li>搞基没有伦敦那么张扬；</li>
<li>大片土地闲置，既不拆迁也不翻修更不新建，大多屎黄色建筑，土的一逼；</li>
<li>还不熟悉，打算明年自驾游一把。</li>
</ol>


<h2><a name="reading">读书</a></h2>

<p>工作之后专门的阅读时间就少了很多，有时连每周10小时的阅读时间都不能保证——所以我打算在15年提高阅读时长和质量。</p>

<h3>专业类</h3>

<p>大多都是比较浅的书，所以收获一般。打算在15年读一些深入的专业书籍。</p>

<ul>
<li><a href="http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/">Effective Java</a>：Java圣经级著作，我的第一本Java书，其本身属于超越语言的作品；</li>
<li><a href="http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/">Java Concurrency in Practice</a>：系统的介绍了Java并发编程，以及如何绕过并发里的种种坑；</li>
<li><a href="http://www.amazon.com/Java-Puzzlers-Traps-Pitfalls-Corner/dp/032133678X/">Java Puzzlers</a>：分门别类的讲述了Java语言的坑，部分例子过于Artificial，但总的来说不错；</li>
<li><a href="http://www.amazon.com/Well-Grounded-Java-Developer-techniques-programming/dp/1617290068/">The Well-Grounded Java Developer</a>：一本与时俱进的Java书籍——覆盖了Java 7之后的的语言特性及JVM特性；</li>
<li><a href="http://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming/dp/1449370772/">Java 8 Lambdas</a>：系统的介绍了Java 8中的Lambda表达式，但不如Brian Goetz的<a href="http://cr.openjdk.java.net/~briangoetz/lambda/">Lambda Articles</a>深入；</li>
<li><a href="http://book.douban.com/subject/24722612/">深入理解Java虚拟机</a>：很优秀的国产JVM书籍，让我对国产技术书籍重拾信心；</li>
<li><a href="http://book.douban.com/subject/7059903/">编写高质量代码 改善Java程序的151个建议</a>：极其低劣的书籍，再度让我对国产技术书籍失去信心；</li>
<li><a href="http://www.amazon.com/Linux-Command-Line-Complete-Introduction/dp/1593273894/">The Linux Command Line</a>：非常不错的Linux Shell入门书籍，不深入，但很实用（尽管我还是觉得Shell语言就是一坨代谢聚合物）；</li>
<li><a href="http://www.amazon.com/Getting-started-Community-Experience-Distilled-ebook/dp/B00EJIZRG6/">Getting Started with Google Guava</a>：很一般的<a href="http://code.google.com/p/guava-libraries/">Google Guava</a>入门书，还不如阅读Guava的Wiki和源码来的实在；</li>
<li><a href="http://www.amazon.com/Google-Guice-Lightweight-Dependency-FirstPress/dp/1590599977/">Google Guice: Agile Lightweight Dependency Injection Framework</a>：Google最常用的IoC框架，书还可以就是有点过时，不如Guice的<a href="https://github.com/google/guice/wiki">文档</a>；</li>
<li><a href="http://www.amazon.com/Practical-Unit-Testing-JUnit-Mockito/dp/8393489393/">Practical Unit Testing with JUnit and Mockito</a>：非常好的Java单元测试书籍，每个Java开发者都应阅读此书；</li>
<li><a href="http://www.amazon.com/Bad-Tests-Good-Tomek-Kaczanowski-ebook/dp/B00IDFKRY8/">Bad Tests, Good Tests</a>：上面那本的补充；</li>
<li><a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/">The Clean Coder: A Code of Conduct for Professional Programmers</a>：成为专业开发者的必读书目，但里面有些原则在国内可能不适用——尤其是对某些996的公司；</li>
<li><a href="http://www.amazon.com/Mastering-Sublime-Text-Dan-Peleg/dp/1849698422/">Mastering Sublime Text</a>：很一般的Sublime Text教程，甚至还不如我写的<a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">教程</a>；</li>
<li><a href="http://www.amazon.com/Architecture-Open-Source-Applications/dp/1257638017/">The Architecture Of Open Source Applications</a>：我学习软件架构的入门书籍；</li>
<li><a href="http://www.amazon.com/Performance-Open-Source-Applications/dp/1304488780/">The Performance of Open Source Applications</a>：我学习提升软件性能的入门书籍；</li>
<li><a href="http://www.amazon.com/Understanding-Computation-Machines-Impossible-Programs/dp/1449329276/">Understanding Computation: From Simple Machines to Impossible Programs</a>：一本很另类的介绍计算理论（Computation Theory）的书籍，我认为如果不用Ruby这么花哨的语言效果会更好；</li>
<li><a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/">Working Effectively with Legacy Code</a>：专业软件开发者必读；</li>
<li><a href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/">The Mythical Man-Month: Essays on Software Engineering</a>：经典重读；</li>
<li><a href="http://www.amazon.com/Design-Essays-Computer-Scientist/dp/0201362988/">The Design of Design: Essays from a Computer Scientist</a>：很玄妙的书籍，因为我着实记不起来内容是什么了——也许需要再读一遍；</li>
<li><a href="http://www.amazon.com/Debugging-Indispensable-Software-Hardware-Problems/dp/0814474578/">Debugging: The 9 Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems</a>：少见的专门介绍调试的书籍，其中的原则不仅仅适用于软件开发；</li>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/">JavaScript: The Good Parts</a>：写Chrome插件时用来入门JavaScript的书籍；</li>
<li><a href="http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/">Professional JavaScript for Web Developers</a>：另一本JavaScript的书籍，废话超多，远不如上一本，不知道为什么这本书被很多人称为圣经；</li>
<li><a href="http://www.amazon.com/Programming-Language-Pragmatics-Third-Michael/dp/0123745144/">Programming Language Pragmatics</a>：超一流编程语言理论书籍，这本书会大大提升学习编程语言的速度和理解程度；</li>
<li><a href="http://www.amazon.com/Quick-Python-Book-Second/dp/193518220X/">The Quick Python Book</a>：用作Python入门，书本身很一般；</li>
<li><a href="http://www.amazon.com/Literate-Programming-Center-Language-Information/dp/0937073806/">Literate Programming</a>：重点阅读了编程错误分析的那一部分，这也是<a href="http://zh.lucida.me/blog/on-programming-errors-1/">关于编程错误的思考</a>系列的出处；</li>
<li><a href="http://www.amazon.com/Science-Programming-Monographs-Computer/dp/0387964800/">The Science of Programming</a>：经典重读；</li>
<li><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/">Structure and Interpretation of Computer Programs</a>：本来计划是完成前四章习题结果拖延症犯了看到第二章就搞别的去了，来年再战；</li>
<li><a href="http://www.amazon.com/Tour-C--Depth/dp/0321958314/">A Tour of C++</a>：为了能读懂C++，所以读了这本入门小书，简练使用；</li>
</ul>


<h3>非专业类</h3>

<p>很杂很混乱，收获尚可。</p>

<ul>
<li><a href="http://www.amazon.com/Steve-Jobs-Walter-Isaacson/dp/1451648537/">Steve Jobs</a>：每次坐飞机时都会重读教主自传，每次读到教主怒骂Android那一段时就会感叹“只恨Steve当年剿匪不力”；</li>
<li><a href="http://www.amazon.com/Universal-Principles-Design-Revised-Updated/dp/1592535879/">Universal Principles of Design</a>：简洁的设计入门书籍；</li>
<li><a href="http://www.amazon.com/Practical-English-Usage-Michael-Swan/dp/0194420981/">Practical English Usage</a>：绝好的英语语法+用法书籍；</li>
<li><a href="http://book.douban.com/subject/1229822/">中式英语之鉴</a>：系统的指出了中式英语常犯的错误，除了例子有些政治化，其它都不错；</li>
<li><a href="http://www.amazon.com/Designing-One-Color-Two-Colors/dp/0062004611/">Designing with One Color and Two Colors</a>：学习配色时看的书，属于Cookbook；</li>
<li><a href="http://book.douban.com/subject/1970428/">激荡三十年</a>：了解中国的经济史；</li>
<li><a href="http://book.douban.com/subject/4010186/">跌荡一百年</a>：同上；</li>
<li><a href="http://book.douban.com/subject/6980818/">浩荡两千年</a>：同上，btw，中国商人太惨了；</li>
<li><a href="http://book.douban.com/subject/25783654/">如何高效学习</a>：建立知识网络，打通各个学科，大概就是这样；</li>
<li><a href="http://book.douban.com/subject/20507212/">习惯的力量</a>：找到产生消极习惯的循环，引入积极的元素，产生积极习惯；</li>
<li><a href="http://book.douban.com/subject/6892579/">美国种族简史</a>：去US时前读的书籍，对Jewish、Irish、Italian、Chinese、Japanese、Mexican等种族有了大概的认识，但这本书实在太旧，我不认为它符合现状；</li>
<li><a href="http://book.douban.com/subject/24383461/">网络素养</a>：所有“网友”都应该阅读此书；</li>
<li><a href="http://book.douban.com/subject/1823751/">中国近代史</a>：非常简练的中国近代史导论——此外大赞这本书的成书时间，正好错过了所有的TG的敏感区，不然它就甭想出版；</li>
<li><a href="http://book.douban.com/subject/1467022/">上帝掷色子吗</a>：通俗的物理学演义，但我一点没觉的通俗，看了一半就困的不行；</li>
<li><a href="http://book.douban.com/subject/4113090/">我们台湾这些年</a>：普通人眼里的台湾近30年历史，很鸡肋的一书，估计是因为受限于内容审查所以很多东西不能写；</li>
<li><a href="http://book.douban.com/subject/10586741/">关键对话</a>：非常好的如何进行理性对话的书籍；</li>
<li><a href="http://www.amazon.com/Dumbbell-Training-Allen-Hedrick/dp/145044458X/">Dumbbell Training</a>：系统的哑铃训练书籍；</li>
<li><a href="http://book.douban.com/subject/1924903/">老子</a>：老祖宗的有些东西现在读起来还是挺有意思的；</li>
<li><a href="http://www.amazon.com/Mastery-Keys-Success-Long-Term-Fulfillment/dp/0452267560/">Mastery: The Keys to Success and Long-Term Fulfillment</a>：很有禅意的超一流书籍——如何在领域内做到登峰造极；</li>
</ul>


<h2><a name="gaming">游戏</a></h2>

<p>2014年的另一个变化就是从PC转向Console——事实证明Console比PC爽太多——尤其对我这种ARPG爱好者。</p>

<p>为了“抄底”，我购入了XBox 360：</p>

<ul>
<li>XBox One刚出一年游戏并不多，而 XBox360上拥有大量游戏而且价格很便宜；</li>
<li>购买一台游戏PC的价格（大致1500$）足以购买一台XBox360+50个经典游戏；</li>
<li>很多经典游戏根本看不上PC这种盗版遍地的low逼平台——例如GTA V，例如God of War；</li>
<li>Kinect。</li>
</ul>


<p>下面是我打通的游戏：</p>

<ul>
<li><a href="http://www.metacritic.com/game/xbox-360/grand-theft-auto-v">GTA V</a>：史上最强神作，为了GTA V买一个主机都是值得的；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/grand-theft-auto-iv-the-complete-edition">GTA VI The Complete Edition</a>：GTA V之前的神作，之前在PC上low逼的打过盗版，所以现在特意买了正版重新打一遍；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/batman-arkham-asylum">Batman Arkham Asylum</a>：非常酷的动作解谜游戏，之前在PC上low逼的打过盗版，所以现在特意买了正版重新打一遍；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/batman-arkham-city">Batman Arkham City</a>：大大超越前作，可惜游戏时长太短；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/asuras-wrath">Asura&rsquo;s Wrath</a>：因为<a href="http://v.youku.com/v_show/id_XNTE0ODA2NDAw_rss.html">西游降魔篇抄袭</a>所以入了这款游戏——游戏本身很糟糕，基本就是QTE完形填空——整个游戏打下来跟看一遍日漫差不多；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/prototype-2">Prototype 2</a>：砍砍砍，跑跑跑，杀杀杀，然后通关，很无聊；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/fable-ii">Fable 2</a>：节奏很慢，但风格不错，喜欢里面的英音；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/red-dead-redemption">Red Dead Redemption</a>：GTA的西部版——GTA V里的很多元素都来自这里，僵尸DLC非常酷；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/darksiders-ii">Darksiders 2</a>：除了没有第一部紧凑，其它还可以；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/diablo-iii-ultimate-evil-edition">Diablo 3 Ultimate Evil</a>：没有想到Diablo这种ARPG在主机上的效果和手感居然能超越PC；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/borderlands">Borderlands</a>：很另类的FPS，这款游戏里我学到的更多的是如何有手柄控制准星 &ndash;_&ndash;#；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/nike+-kinect-training">Nike+Sports</a>：非常专业的Kinect运动游戏，现在每天都会练习30分钟；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/ufc-personal-trainer-the-ultimate-fitness-system">UFC Training</a>：不那么专业的UFC运动训练，偶尔会玩一玩。</li>
</ul>


<p>附上游戏全家福：</p>

<p><img src="http://i.imgur.com/Td2xphs.jpg" alt="XBox 360 Games" /></p>

<h2><a name="buying">败物</a></h2>

<h3><a href="http://www.bose.com/controller?url=/shop_online/speakers/computer_speakers/companion_20/index.jsp">Bose C20</a></h3>

<p><img src="http://i.imgur.com/sFNWZ3s.jpg" alt="Bose C20" /></p>

<p>第一次用Bose产品，很惊讶这么小的体积居然可以发出如此大的声音，看电影尤其爽。</p>

<h3><a href="http://www.amazon.com/Xbox-360-500GB-Call-Duty-Bundle/dp/B00NNU07RU/">XBox 360 + Kinect</a></h3>

<p><img src="http://i.imgur.com/8cxU0iU.png" alt="XBox 360 + Kinect" /></p>

<p>除非你是RTS重度玩家，否则主机要比PC爽太多——既没有年年升级的烦恼，也没有low逼盗版的负罪感。</p>

<h3><a href="http://www.amazon.com/Parrot-Wireless-Cancelling-Headphones-Control/dp/B0081TH24O/">Parrot Zik</a></h3>

<p><img src="http://i.imgur.com/vpihZqi.jpg" alt="Parrot Zik" /></p>

<p>造型很奇特，但戴上去却格外舒适——内置降噪以及音效调节，触控操作非常人性化，唯一的不足就是不能记忆音量——每次都需要重新调节音量。</p>

<h3><a href="http://www.urbanears.com/headphones/plattan/plattan-black/">Urbanears Plattan</a></h3>

<p><img src="http://i.imgur.com/iynkuSI.jpg" alt="Urbanears Plattan" /></p>

<p>源自北欧，伦敦使用率最高的出街耳机，逼格秒杀一票<a href="http://cn.beatsbydre.com/">2B</a>。</p>

<h3><a href="http://bowflex.com/bowflex-home-gyms-us/accessories/freeweights/prdcd~100131/Bowflex+SelectTech+552+Dumbbells.jsp">Bowflex 552</a></h3>

<p><img src="http://i.imgur.com/PSy2aRz.jpg" alt="Bowflex 552" /></p>

<p>到US之后购入，非常好用的家用哑铃，从此再也不用在换铃片上费时间。</p>

<h3><a href="http://www.amazon.com/Microsoft-Sculpt-Ergonomic-Desktop-L5V-00001/dp/B00CYX54C0/">Microsoft Sculpt Ergonomic Desktop</a></h3>

<p><img src="http://i.imgur.com/x0Mycth.jpg" alt="Microsoft Sculpt Ergonomic Desktop" /></p>

<p>造型炫酷，使用舒适，开发者必备。</p>

<h3><a href="http://www.amazon.com/Microsoft-Surface-Pro-Intel-Core/dp/B00KHQWRZS/">Surface Pro 3</a></h3>

<p><img src="http://i.imgur.com/TvD2Rbg.jpg" alt="Surface Pro 3" /></p>

<p>非常炫酷的高性能平板，看文献秒杀iPad，写代码干翻超级本——唯一不足是<a href="http://answers.microsoft.com/en-us/surface/forum/surfpro3-surfusingpro/excessively-loud-fan-constant-overheating-during/1efa253a-f7f2-486b-a891-5633738b8532">散热极差</a>，购买前要小心。</p>

<h3><a href="http://www.microsoftstore.com/store/msusa/en_US/pdp/productID.307449200">Lumia 1520</a></h3>

<p><img src="http://i.imgur.com/Gio4QFq.jpg" alt="Lumia 1520" /></p>

<p>买来之后一直当相机用。</p>

<h3><a href="http://www.thatcompanycalledif.com/">The Company Called If</a></h3>

<p><img src="http://i.imgur.com/9GwlLfx.jpg" alt="Waterstones" /></p>

<p>在伦敦时我经常在<a href="http://www.waterstones.com/waterstonesweb/">Waterstones</a>蹭书，所以接触了<a href="http://www.thatcompanycalledif.com/">The Company Called If</a>这个专产阅读周边的英国本土品牌。</p>

<h4><a href="http://www.thatcompanycalledif.com/17/book-holders/little-book-holder">Little Book Holder</a></h4>

<p><img src="http://i.imgur.com/8CJQFPP.jpg" alt="Little Book Holder" /></p>

<p>非常可爱的书夹，美观性大于实用性，适合看书慢或边看书边笔记的同学。</p>

<h4><a href="http://www.thatcompanycalledif.com/64/reference-bookmarks/multi-reference-bookmarks">Multi-Reference Bookmarks</a></h4>

<p><img src="http://i.imgur.com/GAWIVQZ.jpg" alt="Multi-Reference Bookmarks" /></p>

<p>美观性和实用性兼具的多功能书签，不但能指明页数，还可以指明行数。</p>

<h4><a href="http://www.thatcompanycalledif.com/183/book-holders/the-brilliant-reading-rest">The Brilliant Reading Rest</a></h4>

<p><img src="http://i.imgur.com/JV3gQ7a.jpg" alt="The Brilliant Reading Rest" /></p>

<p>敦实的书架，阅读大部头书时非常好用。</p>

<h4><a href="http://www.thatcompanycalledif.com/20/book-holders/fold-away-book-rest">Fold-Away Book Rest</a></h4>

<p><img src="http://i.imgur.com/emKItSL.jpg" alt="Fold-Away Book Rest" /></p>

<p>很方便的折叠书架，适合中型书籍。</p>

<h3><a href="http://www.fiftythree.com/pencil">Pencil</a></h3>

<p><img src="http://i.imgur.com/Ew7nydU.jpg" alt="Pencil" /></p>

<p><a href="http://www.fiftythree.com/paper">Paper</a>是iPad上的超一流应用，加上<a href="http://www.fiftythree.com/pencil">Pencil</a>更是如虎添翼，木质<a href="http://www.fiftythree.com/pencil">Pencil</a>更是逼格爆表。</p>

<h2><a name="blogging">博客</a></h2>

<p>从2014年我开始写独立博客（<a href="http://zh.lucida.me/">http://zh.lucida.me/</a> ）——一共<a href="http://zh.lucida.me/blog/archives/">27篇</a>，我的<a href="http://zh.lucida.me/blog/my-first-article/">第一篇博文</a>说明了我写独立博客的原因。</p>

<p>刘未鹏的一篇关于<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">为什么要写博客</a>的文章对我影响很大——所以我决定写价值博客——而且是超一流的原创价值博客。</p>

<h3>历程</h3>

<p>由于很长时间没有写作，所以我前期的博文往往篇幅较短，而且叙事混乱，比如<a href="http://zh.lucida.me/blog/memoirs-on-my-postgraduate-life/">从挣钱的角度回忆下自己的研究生三年</a>和<a href="http://zh.lucida.me/blog/on-suppressing-the-internet-addiction/">网络上瘾及其解决方法</a>，都属于相当糟糕的文章。</p>

<p>从<a href="http://zh.lucida.me/blog/on-reading-books/">如何阅读书籍</a>开始，我开始使用统一的模式编写博客——提出问题——分析问题——解决问题。在此篇博文之后的技术博文走的都是这个套路：例如<a href="http://zh.lucida.me/blog/how-to-implement-an-interpreter-in-csharp/">90分钟实现一门编程语言——极简解释器教程</a>和<a href="http://zh.lucida.me/blog/levels-on-learning-and-using-technologies/">学习&amp;使用技术的四种层次</a>。</p>

<p>尽管我非常费力的去写博文，然而访问量却一直不理想——大致一天二三十十的访问，其中两三成还来自我自己。（-_-）</p>

<p>转折点来自<a href="http://zh.lucida.me/blog/on-learning-algorithms/">我的算法学习之路</a>，这篇半经历半吐槽的文章被各种转发推荐，不但让我的博客日访问量上了三位数，还给我带来了四位数的微博关注和豆瓣关注。但我自己很疑惑——这篇文章无论在严谨程度还是技术含量上都不如前面的几篇，但它的阅读量反而却远超前几篇博文的总和。如果你在Google上搜<a href="https://www.google.com.hk/#safe=strict&amp;q=%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0">“算法学习”</a>、<a href="https://www.google.com.hk/#safe=strict&amp;q=%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95">“学习算法”</a>或<a href="https://www.google.com.hk/#safe=strict&amp;q=%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95">“如何学习算法”</a>，<a href="http://zh.lucida.me/blog/on-learning-algorithms/">我的算法学习之路</a>都排在第一位。</p>

<p>我甚至猜测是不是这种诙谐的文章很有市场，于是搞了一篇<a href="http://zh.lucida.me/blog/stories-of-masturbations/">打飞机故事集</a>然后满怀希望的等待访问量再创新高。</p>

<p>结果连个P都没有——看来我的猜测是错的，至少没人会为单纯的诙谐买账。</p>

<p>于是我尝试用另一种方式提高访问量——热门话题。于是就有了<a href="http://zh.lucida.me/blog/on-the-keynote-of-t-one/">关于锤子手机和锤子手机发布会</a>和<a href="http://zh.lucida.me/blog/an-introduction-to-swift/">来自苹果的编程语言——Swift简介</a>这两篇文章，效果很不错。</p>

<p>访问量稳定之后，我开始尝试一些连载文章，比如<a href="http://zh.lucida.me/blog/design-of-design-0-prologue/">设计中的设计</a>和<a href="http://zh.lucida.me/blog/on-programming-errors-0/">关于编程错误的思考</a>这两个系列，尽管这系列文章的访问量不高，但我在其中学到了很多东西。（是的，这两个系列我还没写完，来年再填）</p>

<p>为了学习<a href="http://www.sublimetext.com/">Sublime Text</a>，我写了<a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">Sublime Text 全程指南</a>这篇教程，现在它已经是最热门的Sublime Text中文教程——在Google上搜索<a href="https://www.google.com.hk/#safe=strict&amp;q=sublime+text+%E6%95%99%E7%A8%8B">“Sublime Text 教程”</a>或<a href="https://www.google.com.hk/#safe=strict&amp;q=sublime+text+%E6%8C%87%E5%8D%97">“Sublime Text 教程”</a>它都排在第一位，而<a href="https://www.google.com.hk/#safe=strict&amp;q=sublime+text">Google搜索“Sublime Text”</a>这篇教程则紧随Sublime Text官网之后。</p>

<p>再之后，我翻译了Brian Goetz的<a href="http://zh.lucida.me/blog/java-8-lambdas-insideout-language-features/">Lambda Articles</a>，并回顾了我以前写的<a href="http://zh.lucida.me/blog/top-code-offline-browser/">Top Coder浏览器</a>和<a href="http://zh.lucida.me/blog/lucida-pinyin-converter/">Lucida拼音库</a>。</p>

<p>总之，2014年是一个不错的开端。从2015年开始，维持<a href="http://zh.lucida.me/">中文博客</a>的同时，我会开始编写<a href="http://en.lucida.me/">英文博客</a>——相信在明年会有我的英文博文被“翻译”回中文，到时一定会很有趣。</p>

<h2><a name="planning">展望</a></h2>

<p>2015年有很多事情要做，但主要目标（Primary Objectives）很简单——3件事，按优先级排序：</p>

<ol>
<li><strong>减重</strong>——工作之后体重稳步增长到160斤（身高173cm），我实在不想成为一个胖逼（胖子是没有前途的！！），所以15年的目标是把体重控制回135斤以内；（实际上已经锻炼了1个多月，减掉了4斤）；</li>
<li><strong>升职</strong>——是时候尝试下了 :&ndash;) ；</li>
<li><strong>写书</strong>——早在一年半之前<a href="http://www.phei.com.cn/">电子工业出版社</a>就曾经联系过我写一本关于程序员求职的书，原计划是去年8月出版（瀑布汗，实在对不住<a href="http://www.weibo.com/208686914">@永恒的侠少</a>），结果一直拖到现在（一方面是懒，另一方面是觉得实力不足）。工作一年多写了一年博客之后，经验和写作能力都提升不小，是时候把这个坑填上了。</li>
</ol>


<p>次要目标（Secondary Objectives）包括但不限于：</p>

<ol>
<li>撰写英文博客——至少做到三篇进入<a href="http://www.reddit.com/r/programming">Reddit Programming</a> Top 5；</li>
<li>完成SICP前四章习题；</li>
<li>完成Merriam Webster Vocabulary Builder里的单词；</li>
<li>至少做3次Tech Talk；</li>
<li>阅读5本以上的软件开发领域的经典书籍；</li>
<li>搞定Python Readability；</li>
<li>重新精读<a href="http://www.amazon.com/Programming-Language-Pragmatics-Third-Edition/dp/0123745144">Programming Language Pragmatics</a>，构建自己的程序设计语言知识框架；</li>
<li>……</li>
</ol>


<p>以上。</p>

<hr />

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/2014-summary/">http://zh.lucida.me/blog/2014-summary/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计中的设计——1. Horror Vacui]]></title>
    <link href="http://zh.lucida.me/blog/design-of-design-1-horror-vacui/"/>
    <updated>2014-07-26T16:10:03-07:00</updated>
    <id>http://zh.lucida.me/blog/design-of-design-1-horror-vacui</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/design-of-design-1-horror-vacui/">原文链接</a></p>

<h2>关于</h2>

<p>“设计中的设计”是一个博文系列，我打算在这个系列记录我所见过的优秀设计和优秀设计原则，并推荐一些（我认为）不错的设计书籍。</p>

<p>在“<strong>设计</strong>中的<strong>设计</strong>”里，第一个<strong>设计</strong>指具有杰出设计的优秀产品，而第二个<em>设计</em>指优秀产品具有的杰出设计。</p>

<ol>
<li><a href="http://zh.lucida.me/blog/design-of-design-0-horror-prologue/">设计中的设计——0. Prologue</a></li>
<li><a href="http://zh.lucida.me/blog/design-of-design-1-horror-vacui/">设计中的设计——1. Horror Vacui</a></li>
</ol>


<h2>Horror Vacui</h2>

<blockquote><p>Horror Vacui——a Latin expression meaning &ldquo;fear of emptiness"——regards the desire to fill empty spaces with information of objects.</p></blockquote>

<p><strong><a href="http://en.wikipedia.org/wiki/Horror_vacui">Horror Vacui</a></strong>源自人对空旷空间的畏惧感——它是一种要将空间填满的心理，也是一种不留任何空白空间的艺术风格，这种风格的代表设计师包括David Carson和Vaughan Oliver，有兴趣的童鞋请自行Google他们的代表作品。</p>

<p>不过这篇文章讨论的并不是<strong>Horror Vacui</strong>艺术风格，而是<strong>Horror Vacui</strong>心理。</p>

<!-- more -->


<p>研究表明，<strong>Horror Vacui</strong>和<strong>价值感知（Value Perception）</strong>间存在反比关系——随着<strong>Horror Vacui</strong>的升高，价值感知随之下降。简单的来说——同样的空间，放的东西越多，给人的廉价感越强烈，反之亦然（vice versa）。</p>

<p>以服装店店面的设计为例：</p>

<p><img src="http://i.imgur.com/FFblJhS.png" alt="Horror Vacui" /></p>

<p>研究者做了一个调查，对于上面的店面设计风格，从左到右的空间利用率越来越低，然而给人的价值感知正好相反——几乎所有被调查者都认为最左的廉价感最强，而最右的高端感最强。</p>

<p>再来几个现实例子：</p>

<h3>店铺</h3>

<p><img class="<a" src="href="http://i.imgur.com/5LsZvER.jpg">http://i.imgur.com/5LsZvER.jpg</a>" width="600" height="400" title="西单某服装店" ></p>

<p><img class="<a" src="href="http://i.imgur.com/CtXZzWw.jpg">http://i.imgur.com/CtXZzWw.jpg</a>" width="600" height="400" title="优衣库" ></p>

<p><img class="<a" src="href="http://i.imgur.com/CUwAJDd.jpg">http://i.imgur.com/CUwAJDd.jpg</a>" width="600" height="400" title="Burberry" ></p>

<p>你觉得哪一个店更贵？</p>

<h3>食物</h3>

<p><img class="<a" src="href="http://i.imgur.com/YwI3YGU.jpg">http://i.imgur.com/YwI3YGU.jpg</a>" width="600" height="400" title="东北乱炖" ></p>

<p><img class="<a" src="href="http://i.imgur.com/pw8iVAa.jpg">http://i.imgur.com/pw8iVAa.jpg</a>" width="600" height="400" title="法式食物" ></p>

<p>你认为哪道菜更贵？</p>

<h2>Horror Vacui vs Minimalism</h2>

<p>Horror Vacui设计是Minimalism设计的反面，<a href="http://www.amazon.co.uk/Universal-Principles-Design-Revised-Updated/dp/1592535879">Universal Principles of Design</a>在介绍Horror Vacui时给出了下面刻薄但又实用的建议：</p>

<blockquote><p>To promote associations of high value, favor minimalism for affluent and well-educated audiences and horror vacui for poorer and less-educated audiences, and vice versa.</p></blockquote>

<p>简单来说：</p>

<ul>
<li>对于教育程度高或富有的用户，使用minimalism（极简）设计以带来高价值认知。</li>
<li>对于教育程度低或较穷的用户，使用horror vacui设计以带来高性价比认知。</li>
</ul>


<p>反之也一样：</p>

<ul>
<li>对于教育程度低或较穷的用户，minimalism设计会让他们认为这货性价比太低，不值得。</li>
<li>对于教育程度高或富有的用户，horror vacui设计会让他们认为这货太廉价，没必要。</li>
</ul>


<p>总之，不用给矮矬穷营造高大上，也不要给高帅富灌输便宜大碗，会有反效果。</p>

<h2>Universal Principles of Design</h2>

<p><img src="http://i.imgur.com/EEueKvz.jpg" alt="Universal Principles of Design" /></p>

<p>我在之前的<a href="http://zh.lucida.me/blog/on-reading-books/">如何阅读书籍</a>中提到利用结论型/指南型书籍精炼阅读专业周边书籍，<a href="http://www.amazon.co.uk/Universal-Principles-Design-Revised-Updated/dp/1592535879">Universal Principles of Design</a>就是设计中结论型书籍的代表作：</p>

<ol>
<li>包含一百多种实用设计原则，这些原则涵盖了改善可用性（Enhance usability）、影响感知（Infuluence Perception）、提升吸引力（Increase Appeal）、做出更好的设计决策（Make Better Design Decisions）以及设计教学（Teach through Design）这五大方面。</li>
<li>全书按照字母顺序（Alphabetical Order）组织，同时也包含按类别组织的目录，既方便查阅，也方便针对性阅读。</li>
<li>每一种设计原则都配有详细的文字介绍、图解、案例以及参考文献。</li>
</ol>


<p><img src="http://i.imgur.com/eqTjTqK.jpg" alt="样章" /></p>

<p>总之，这本书对于专业设计师可能比较初级，但对于设计入门者是绝好的书籍。任何涉及到制作最终用户产品的人员（包括开发、测试和产品等）都应该阅读此书，从而了解基本设计原则（principle）和术语（terminology），以便与设计师进行交流，做出令用户满意的高价值设计。</p>

<p>这本书有<a href="http://www.amazon.cn/%E9%80%9A%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%B3%95%E5%88%99-%E5%A8%81%E5%BB%89%E2%80%A2%E7%AB%8B%E5%BE%B7%E5%A8%81%E5%B0%94/dp/B00ES8JL8W/">中文译版</a>，但个人强烈推荐<a href="http://www.amazon.cn/Universal-Principles-of-Design-Lidwell-William/dp/1592535879/">原版</a>：因为这类书籍翻译过来会损失相当多的信息（注意并非否认翻译水平），此外原版价格也相当实惠。</p>

<p>（未完待续）</p>

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/design-of-design-1-horror-vacui/">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程错误的思考——2. Blunders, Typos, Mismatches, and Language Liability]]></title>
    <link href="http://zh.lucida.me/blog/on-programming-errors-2/"/>
    <updated>2014-06-27T15:46:53-07:00</updated>
    <id>http://zh.lucida.me/blog/on-programming-errors-2</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-2/">原文链接</a></p>

<h2>概要</h2>

<p><strong>关于编程错误的思考</strong>是一个博文系列，我试图通过结合<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对编程错误的分类以及自己的编程经验，对常见的编程错误、以及如何控制和预防这些错误进行介绍。</p>

<ol>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-0/">Knuth, TEX, and the Errors of TEX</a></li>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-1/">A Taxonomy of Programming Errors</a></li>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-2/">Blunders, Typos, Mismatches, and Language Liability</a></li>
<li>Algorithm + Data Structures &ndash;> Programming</li>
<li>Robustness and Surprise</li>
<li>On Enhancing Existing Systems</li>
<li>Epilogue</li>
</ol>


<h2>对编程错误的分析</h2>

<p>上篇文章（<a href="http://zh.lucida.me/blog/on-programming-errors-1/">A Taxonomy of Programming Errors</a>）介绍了Knuth对编程错误的分类，基于Knuth的分类和我自己的编程经验，从这篇文章开始我将会给出各类编程错误的<strong>案例</strong>、<strong>诱因</strong>和<strong>对策</strong>。</p>

<p>按照复杂程度的不同，Knuth将编程错误分为三大类，这篇文章介绍第一类错误——简单的错误：</p>

<ul>
<li><strong>粗心大意</strong>：敲错了代码。</li>
<li><strong>鬼使神差</strong>：敲串了代码。</li>
<li><strong>丢三落四</strong>：忘敲了代码。</li>
<li><strong>言非所指</strong>：踩语言的坑。</li>
<li><strong>事与愿违</strong>：中自己的坑。</li>
</ul>


<!-- more -->


<h2>粗心大意（a trivial typo）</h2>

<blockquote><p>Sometimes I did&rsquo;t type the right thing when I entered the program into the computer, although my original pencil draft was correct.</p>

<p>我在打字时会犯一些小错，以至我纸上的草稿是对的，但敲进去的是错的。</p></blockquote>

<p><strong>粗心大意</strong>这类差错源自于Knuth奇葩的开发方式——先把程序在纸上写好然后再"誊写"到计算机中，而在"誊写"时可能会敲错几个字符，从而导致程序出错。</p>

<p>除去面试时的白板编码，我认为现代程序开发不可能在纸上进行——从而也不可能产生这种差错，所以不加赘述。</p>

<h2>鬼使神差（a blunder or botch）</h2>

<blockquote><p>Here I knew what I ought to do, but I wrote something else that was syntactically correct&mdash;sort of a mental typo.</p>

<p>我知道这段代码该怎么写，但我糊里糊涂写了另外一段出来而且还能通过编译。</p></blockquote>

<h3>案例</h3>

<p>Knuth在<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>中提到一个低级Bug：TEX代码里有两个变量<code>new_line</code>和<code>next_line</code>：<code>new_line</code>用于表示程序当前的状态，而<code>next_line</code>则指代换行符。然而开发过程中Knuth混淆了这两个变量的用途——由于这两个变量属于同一类型所以编译器无法检测出这个问题，这个Bug直到后来程序运行了一段时间才被发现。</p>

<h3>诱因</h3>

<ul>
<li>变量名含糊不清：导致之后的误用。</li>
<li>编程语言过分宽容：某些编程语言对代码特别宽容——比如动态编程语言会将静态编程语言在编译时做的类型检查拖到运行时，尽管获得了灵活性，但却损失了精确性。从而导致<strong>鬼使神差</strong>这类静态语言编译期就能检查到的错误直到运行时才会被发现。</li>
<li>加班超负荷工作：从而导致写出翔一般的代码。</li>
</ul>


<h3>对策</h3>

<ol>
<li>使用精准的名字：

<ul>
<li>作用域越长的变量的名字越要精确。</li>
<li>使用精准的英文词汇描述变量。</li>
<li>更多关于命名的信息请参考<a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/">Code Complete</a>中<strong>The Power of Variable Names</strong>一节。</li>
</ul>
</li>
<li>严格控制全局变量：

<ul>
<li>能不用则不用。</li>
<li>如果不得不使用，使用明确的名字，进行详细的注释，并注明不得不使用全局变量的原因。。</li>
</ul>
</li>
<li>优先使用强类型：例如对于内置强类型枚举（Enum）的语言（例如Java，C#，和C++），使用枚举类型表示状态（State），而非整数类型。</li>
<li>将编译器警告调到最高级：然后清除代码中所有的Warning。</li>
<li>单元测试：编写单元测试，保证代码覆盖，确保一段代码都按期望的方式执行。</li>
<li>单步（Step Into）自己的代码：编写新代码后进行单步调试——你脑中的代码和实际可能不一样。</li>
<li>进行代码审查：可以参考<a href="http://coolshell.cn/articles/11432.html">这篇文章</a>。</li>
<li>不要在混沌状态提交代码。</li>
</ol>


<h2>丢三落四（a forgotten function）</h2>

<blockquote><p>Here I didn&rsquo;t remember to do everything I had intended, when I actually got around to writing a particular part of the code.</p>

<p>我忘记了一些本应完成的事情，比如说我知道这段代码应该写但我忘了写。</p></blockquote>

<h3>案例</h3>

<h4>烫烫烫烫烫</h4>

<p>C语言中忘记初始化数组，从而输出喜闻乐见的“烫烫烫烫烫烫烫烫烫烫烫烫”。</p>

<p><img src="http://i.imgur.com/9RcLu2x.png" alt="烫烫烫烫烫烫" /></p>

<p>对于需要手动管理内存的语言（C/C++），忘记释放内存或忘记初始化内存都会导致各种奇诡的问题。</p>

<h4>过早优化</h4>

<p>在开发TEX时，Knuth试图去优化<code>get_next</code>这个被频繁调用的函数。经过一番思考，Knuth认为<code>cur_cs = 0</code>这段代码是不必要的，于是他将这段代码删除，代码依然"正常"运行。然而过了一段时间后Knuth发现TEX在处理对齐（Alignment）时有时会出现问题——经过一番调试，Knuth发现原来那段被删除的代码是必要的（necessary）。</p>

<p>郁闷之余，Knuth援引了那句著名的话（Hoare&rsquo;s dictum）——过早优化是万恶之源（Premature optimization is the root of all evil in programming），很多书都以为这句话是Knuth说的，实际上它属于<a href="http://en.wikipedia.org/wiki/C._A._R._Hoare">Tony Hoare</a>。</p>

<h3>诱因</h3>

<h4>远距离操作</h4>

<p>远距离操作指那些间隔特别长的操作，例如下面的代码：</p>

<p><code>
obj.Init()
obj.DoSomething()
// Hundred of lines
obj.DoSomething()
obj.Close()
</code></p>

<p>从<code>Init</code>到<code>Close</code>的距离过远，在编写了几十甚至上百行其它代码之后，很容易漏掉<code>obj.Close()</code>从而导致资源泄漏。</p>

<h4>贸然修改代码</h4>

<p>我个人认为Knuth所犯的错误不在于过早优化，而在于他在对代码理解不充分的情况下就去贸然修改——这往往会带来各种问题。</p>

<h3>应对</h3>

<ul>
<li>避免远距离操作：

<ul>
<li>对于内存管理：C++提供了智能指针。</li>
<li>多数编程语言提供了上下文管理器（Context Manager）：例如Java 7的<code>try</code>，C#的<code>using</code>，以及Python的<code>with</code>，利用这些机制，可以有效的减少远距离操作，比如前文的代码用Python可以这么写：</li>
</ul>
</li>
</ul>


<p><code>python
with Obj.Init() as obj:
  obj.DoSomething()
  // Hundred of lines
  obj.DoSomething()
</code></p>

<ul>
<li> 整理代码段落，避免复杂交织的逻辑，这里可以参考<a href="http://www.amazon.com/The-Readable-Code-Theory-Practice/dp/0596802293">The Art of Readable Code</a>对Aesthetics的定义。</li>
</ul>


<p><img class="right <a" src="href="http://i.imgur.com/Mvr8zx2.jpg">http://i.imgur.com/Mvr8zx2.jpg</a>" width="180" height="250" title="Working Effectively with Legacy Code" ></p>

<ul>
<li><p>不要贸然修改代码：</p>

<ul>
<li>修改代码前要确保充分理解代码的原理，以及修改会带来的影响（Effect Analysis）。</li>
<li>修改代码后要保证被修改的部分得到测试，<a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/">Working Effectively with Legacy Code</a>提供了很多优秀的修改实践。</li>
</ul>
</li>
<li><p>代码审查：代码审查可以有效的控制编程差错。</p></li>
<li>不要在混沌状态提交代码。</li>
</ul>


<h2>言非所指（a language liability）</h2>

<blockquote><p>Here I misused or misunderstood the programming language or system hardware I was working with.</p>

<p>我对编程语言（或是系统硬件）理解有误，从而造成错误。</p></blockquote>

<h3>案例</h3>

<h4>JavaScript</h4>

<p>下面是JavaScript的真值表（源自Douglas Crockford）：</p>

<p><code>js
''        ==   '0'           // false
0         ==   ''            // true
0         ==   '0'           // true
false     ==   'false'       // false
false     ==   '0'           // true
false     ==   undefined     // false
false     ==   null          // false
null      ==   undefined     // true
" \t\r\n" ==   0             // true
</code></p>

<p>此外还有下面这个对比：</p>

<p><img src="http://i.imgur.com/5RCkNLK.jpg" alt="JavaScript the Good Parts" /></p>

<p>对于这种翔一样的语言，想不掉进坑里是非常困难的。</p>

<p>（讽刺的是，JavaScript统治了浏览器端，而且它还试图染指服务器端。）</p>

<h4>操作符优先级</h4>

<p><img class="right <a" src="href="http://i.imgur.com/5WjUpyd.jpg">http://i.imgur.com/5WjUpyd.jpg</a>" width="160" height="200" title="the Practice of Programming" ></p>

<p>[Brian Kernighan]曾在在<a href="http://cm.bell-labs.com/cm/cs/tpop/index.html">the Practice of Programming</a>中提到<code>if (x &amp; MASK == BITS)</code>这个例子：</p>

<p>我们一般会把<code>if (x &amp; MASK == BITS)</code>理解为<code>if ((x &amp; MASK) == BITS)</code>；</p>

<p>但实际上<code>if (x &amp; MASK == BITS)</code>和<code>if (x &amp; (MASK == BITS))</code>等价，而这显然不是我们想要的结果。</p>

<h3>诱因</h3>

<ul>
<li>对编程语言不够了解。</li>
<li>编程语言本身设计有问题。</li>
<li>对操作符优先级理解不足。</li>
</ul>


<h5>应对</h5>

<ul>
<li>深入理解编程语言——知道哪有坑：

<ul>
<li>学习编程语言不只是学它的语法——还要学习它的用法（Usages），最佳实践（Best Practices），误区（Traps），惯例（Conventions）和风格（Styles）等等，阅读<em>Effective</em>、<em>More Effective</em>、<em>Exceptional</em>、<em>More Exceptional</em>、<em>Pitfalls/Traps</em>和<em>the Good Parts</em>等系列的编程书籍以了解这些内容。</li>
<li><a href="http://joearms.github.io/">Joe Armstrong</a>在<a href="http://codersatwork.com/">Coders at work</a>的访谈中提到学习编程语言最好的方式是实现它（“The best way to learn a programming language is to implement it yourself”），我尝试用这种方法学习JavaScript，效果还不错。</li>
</ul>
</li>
<li>使用且仅使用语言的良子集——避开那些坑：

<ul>
<li><a href="http://crockford.com/">Douglas Crockford</a>在<a href="http://www.amazon.com/exec/obidos/ASIN/0596517742/">JavaScript: the Good Parts</a>中仅仅摘取了一个很小的JavaScript良子集进行编程，Kernighan和Plauger在<a href="http://www.amazon.com/Software-Tools-Brian-W-Kernighan/dp/020103669X/">Software Tools</a>则扩展了Fortran的一个良子集进行编程。语言提供的特性不代表你必须要使用它，容易产生错误（Error Prone）的语言特性应当被禁用。</li>
</ul>
</li>
<li>使用括号明确（Explicitify）操作符优先级——哪怕你能一眼看出<code>return true || true &amp;&amp; false</code>的返回值。</li>
<li>谨慎使用宏（macro）。</li>
<li>代码审查：提交代码之前至少需要一个该精通语言的人的审查，以免踩进语言的坑里。</li>
</ul>


<h2>事与愿违（a mismatch between modules）</h2>

<blockquote><p>Here I forgot the conventions I had built into a subroutine when I actually got around to using that subroutine.</p>

<p>我忘了我自己编写的例程（或函数）的正确用法，以至于调用它们时出现问题。</p></blockquote>

<h3>案例</h3>

<h4>火星探测器坠毁</h4>

<p>史上最贵的<strong>事与愿违</strong>的Bug出现在1998年的NASA火星探测器中，这个Bug直接导致火星探测器坠毁，损失高达<a href="http://www.computerworld.com/s/article/9183580/Epic_failures_11_infamous_software_bugs">3.27亿美元</a>。</p>

<p>而这个Bug的成因在我们看来实际很可笑——Lockheed Martin公司在<a href="http://www.jpl.nasa.gov/news/releases/99/mcoloss1.html">调查</a>后发现，由于不同开发团队使用的计量单位不同——一个团队使用英制单位（英寸，英尺或英镑等），而其它开发团队使用公制（厘米或公斤等），从而导致系统运算错误，最终导致探测器坠毁。</p>

<h4>愚蠢的API设计</h4>

<p>以前在Microsoft实习时，我曾经编写过一个动画方法，用于移动屏幕上某个控件，这个方法大概是下面这个样子：</p>

<p>```csharp
// Returns a DoubleAnimation which moves control from (x1, y1) to (x2, y2).
public DoubleAnimation CreateAnimation(Control control, int x1, int y1, int x2, int y2, double duration) {</p>

<pre><code>// Some code...
</code></pre>

<p>}
```</p>

<p><code>CreateAnimation</code>用于创建一个<code>DoubleAnimation</code>，把某个控件从<code>(x1, y1)</code>移动到<code>(x2, y2)</code>，移动耗时<code>duration</code>毫秒。</p>

<p>之后就出现了下面一系列翔一般的代码：</p>

<p><code>csharp
var gridAnimation1 = CreateAnimation(grid1, grid1.X, grid1.Y, 480, 0, 500);
var gridAnimation2 = CreateAnimation(grid2, grid2.X, grid2.Y, 0, 0, 500);
var popUpAnimation = CreateAnimation(popUp, 0, -320, 0, 320, 500);
</code></p>

<p>以及误用（组员（包括我自己）把<code>duration</code>当成秒来用）：</p>

<p><code>csharp
var gridAnimation1 = CreateAnimation(grid1, 480, 800, 480, 0, 0.5);
</code></p>

<p>这个方法如同<strong>病毒</strong>一般，既使得调用代码变的丑陋不堪，同时带来了各种Bug，导致后来的维护者叫苦不迭，</p>

<p>现在回想下，我肯定不会把它设计成这副模样——一种方法是使用<a href="http://en.wikipedia.org/wiki/Fluent_interface">Fluent Interface</a>，例如：</p>

<p><code>csharp
var gridAnimation = grid.FromCurrentPosition().MoveTo(x: 0, y: 0).InMilliSeconds(500);
var popUpAnimation = popUp.From(x: 0, y: -320).MoveTo(x: 0, y: 320).InMilliSeconds(500);
</code></p>

<p>从而使代码简洁明确。</p>

<h3>诱因</h3>

<p><strong>事与愿违</strong>源于糟糕的设计——人会犯错误，而糟糕的设计会大大加剧错误几率。</p>

<p><img class="right <a" src="href="http://i.imgur.com/jdeK9F0.jpg">http://i.imgur.com/jdeK9F0.jpg</a>" width="270" height="270" title="Tony Hoare" ></p>

<p>然而良好的设计非常困难——<a href="http://en.wikipedia.org/wiki/C._A._R._Hoare">Tony Hoare</a>曾在他的图灵奖获奖感言（<a href="http://zoo.cs.yale.edu/classes/cs422/2014/bib/hoare81emperor.pdf">The Emperor&rsquo;s Old Clothes</a>）中指出：</p>

<blockquote><p>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.</p></blockquote>

<h3>应对</h3>

<p>尽管Knuth把<strong>事与愿违</strong>归类为简单的差错，但我并不这么认为。<strong>事与愿违</strong>源于错误的设计，解决<strong>事与愿违</strong>的关键不在于修复其造成的差错，而在于处理造成<strong>事与愿违</strong>原因。修复<strong>事与愿违</strong>的错误很简单，但处理<strong>事与愿违</strong>的原因就复杂多了。</p>

<p><img class="right <a" src="href="http://i.imgur.com/tll1S89.jpg">http://i.imgur.com/tll1S89.jpg</a>" width="180" height="240" title="Awaken the Giant Within" ></p>

<p><a href="http://www.tonyrobbins.com/">Tony Robbins</a>曾在<a href="http://www.amazon.com/Awaken-Giant-Within-Immediate-Emotional/dp/0671791540/">Awaken the Giant Within</a>一书中讲了这样一个故事：</p>

<blockquote><p>一个医生在河边发现有一个人溺水，然后她跳进河里，把溺水者救上岸进行抢救。然而没过多久她又听到呼救声，她继续跳进河里，把溺水者救上岸抢救，然后她又听到求救，于是她又跳进河里…… 不幸的是，这名医生忙于抢救眼前的溺水者，而没有时间去上游查看是谁把这些人扔到水里的。</p></blockquote>

<p><img class="right <a" src="href="http://i.imgur.com/t5zjiGY.jpg">http://i.imgur.com/t5zjiGY.jpg</a>" width="180" height="240" title="Stream Analysis" ></p>

<p><a href="http://www.jerryporras.com/">Jerry Porras</a>也在<a href="http://www.amazon.com/Stream-Analysis-Organizational-Addison-Wesley-Organization/dp/0201056933/">Stream Analysis</a>中提到：</p>

<blockquote><p>People, especially people in organizations, tend to work on getting rid of symptoms, rather than solving the real problems.</p></blockquote>

<p>因此，处理<strong>事与愿违</strong>要从设计着手（Solving the real problems），这里从设计者和使用者两个角度出发：</p>

<h4>设计者</h4>

<ol>
<li>谨慎设计API：

<ul>
<li>API应该由经验丰富的人设计。</li>
<li>API设计应遵循一定的原则，<a href="http://en.wikipedia.org/wiki/Joshua_Bloch">Josha Bloch</a>曾在Google做过一个非常出色的关于API设计的演讲：<a href="https://www.youtube.com/watch?v=aAb7hSCtvGw">How To Design A Good API and Why it Matters</a>。</li>
<li>API在投入使用前应进行可用性测试——糟糕的API不仅会降低开发效率，还会像病毒一般引入各种各样的差错。</li>
</ul>
</li>
<li>利用类型系统：

<ul>
<li>避免基本类型（Primitive Type）：对于有意义的数据，使用其类型而非基本类型。例如：使用<code>Money</code>表示金钱，而非使用<code>double</code>。</li>
<li>避免使用动态语言（例如Python和Ruby）构建大型系统：动态语言的作用仅限于快速开发原型系统，在我看来，动态语言像是纸和胶水，可以用它们快速构建一些玩具模型（原型系统），但用它们建造摩天大厦（大型系统）就太离谱了。</li>
</ul>
</li>
<li>设计文档+审查：软件设计在实现前应有详细的设计文档（Design Document），并至少通过两名以上经验丰富的开发者的审查。</li>
</ol>


<h4>使用者</h4>

<p><img class="right <a" src="href="http://i.imgur.com/3vIYjeg.jpg">http://i.imgur.com/3vIYjeg.jpg</a>" width="180" height="240" title="Debugging" ></p>

<ol>
<li>仔细阅读文档——Read the manual, and read everything, cover to cover，参见<a href="http://www.amazon.com/Debugging-Indispensable-Software-Hardware-Problems/dp/0814474578/">Debugging: The 9 Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems</a>里的第一条调试原则——<strong>Understand the system</strong>。</li>
<li>调用API时仔细阅读其样例代码（Sample Code）和文档说明，不要想当然。</li>
<li>对于已有（Existing）的糟糕API，考虑对其进行封装（Wrapping），以免接下来的误用。</li>
<li>单元测试：编写单元测试，保证代码覆盖，确保一段代码都按期望的方式执行。</li>
<li>代码审查：代码审查可以有效的控制编程差错。</li>
</ol>


<p>关于"简单"的编程差错就介绍到这里，下篇将介绍源自算法和数据结构的错误——Algorithm + Data Structures &ndash;> Programming。</p>

<p>——未完待续</p>

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-2/">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程错误的思考——1. A Taxonomy of Programming Errors]]></title>
    <link href="http://zh.lucida.me/blog/on-programming-errors-1/"/>
    <updated>2014-06-24T15:32:12-07:00</updated>
    <id>http://zh.lucida.me/blog/on-programming-errors-1</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-1/">原文链接</a></p>

<h2>概要</h2>

<p><strong>关于编程错误的思考</strong>是一个博文系列，我试图通过结合<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对编程错误的分类以及自己的编程经验，对常见的编程错误、以及如何控制和预防这些错误进行介绍。</p>

<ol>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-0/">Knuth, TEX, and the Errors of TEX</a></li>
<li><a href="http://zh.lucida.me/blog/on-programming-errors-1/">A Taxonomy of Programming Errors</a></li>
<li>Blunders, Typos, Mismatches, and Language Liability</li>
<li>Algorithm + Data Structures &ndash;> Programming</li>
<li>Robustness and Surprise</li>
<li>On Enhancing Existing Systems</li>
<li>Epilogue</li>
</ol>


<h2>编程错误的分类</h2>

<p>前文讲到Knuth在开发TEX的过程中遇到了各式各样的差错，为了理解并控制编程错误，Knuth将这些错误整理到<a href="http://texdoc.net/texmf-dist/doc/generic/knuth/errata/errorlog.pdf">记录日志</a>，并将这些差错分为15类。为了引用方便，我将它们翻译成中文。</p>

<p>注意：</p>

<ol>
<li>为了引用方便，Knuth使用英文首字母指代各个编程错误的分类，出于同样的原因，我将这些分类一一翻译为成语。</li>
<li>保留原文，以便读者理解，以免信息丢失。</li>
<li>原文中的"my"和"I"以及译文中的"我"均指Knuth本人。</li>
<li>如果认为翻译不靠谱请在评论中指出 :)</li>
</ol>


<p>下面是Knuth对TEX错误的分类：</p>

<!-- more -->


<hr />

<ul>
<li><strong>A: an algorithm awry.</strong> Here my original method proved to be incorrect or inadequate.</li>
<li><strong>不可胜算</strong>：我最初设想的算法有误或存在不足。</li>
</ul>


<hr />

<ul>
<li><strong>B: a blunder or botch.</strong> Here I knew what I ought to do, but I wrote something else that was syntactically correct&mdash;sort of a mental typo.</li>
<li><strong>鬼使神差</strong>：我知道这段代码该怎么写，但我糊里糊涂写了另外一段出来而且还能通过编译。</li>
</ul>


<hr />

<ul>
<li><strong>C: a cleanup for consistency or clarity.</strong> Here I changed the rules of the language to make things easier to remember and/or more logical.</li>
<li><strong>得心应手</strong>：我对语言（TEX）规则进行整理，使其符合逻辑，更加易用。</li>
</ul>


<hr />

<ul>
<li><strong>D: a data structure debacle.</strong> Here I didn&rsquo;t properly update the representation of information to preserve the appropriate invariants.</li>
<li><strong>差之毫厘</strong>：我对数据结构的操作有误，使其处在不一致的状态（破坏了其本应维持的不变式）。</li>
</ul>


<hr />

<ul>
<li><strong>E: an efficiency enhancement.</strong> Here I changed the program so that it would run faster; the existing code was correct but slow.</li>
<li><strong>多快好省</strong>：尽管原来的代码正确，但速度很慢，于是我修改代码以改善程序的性能。</li>
</ul>


<hr />

<ul>
<li><strong>F: a forgotten function.</strong> Here I didn&rsquo;t remember to do everything I had intended, when I actually got around to writing a particular part of the code.</li>
<li><strong>丢三落四</strong>：我忘记了一些本应完成的事情，比如说我知道这段代码应该写但我忘了写。</li>
</ul>


<hr />

<ul>
<li><strong>G: a generalization or growth of ability.</strong> Here I realized that some extension of the existing specifications was desirable.</li>
<li><strong>虚怀若谷</strong>：我将一些已有的代码进行扩展/抽象使其更加通用。</li>
</ul>


<hr />

<ul>
<li><strong>I: an interactive improvement.</strong> Here I made TEX respond better to the user&rsquo;s needs.</li>
<li><strong>各得其所</strong>：我使TEX对用户更加友好。</li>
</ul>


<hr />

<ul>
<li><strong>L: a language liability.</strong> Here I misused or misunderstood the programming language or system hardware I was working with.</li>
<li><strong>言非所指</strong>：我对编程语言（或是系统硬件）理解有误，从而造成错误。</li>
</ul>


<hr />

<ul>
<li><strong>M: a mismatch between modules.</strong> Here I forgot the conventions I had built into a subroutine when I actually got around to using that subroutine.</li>
<li><strong>事与愿违</strong>：我忘了我自己编写的例程（或函数）的正确用法，以至于调用它们时出现问题。</li>
</ul>


<hr />

<ul>
<li><strong>P: a promotion of portability.</strong> Here I changed the organization or documentation of the program; this affected only a person who would try to read or modify the code, not a person who tried to run it.</li>
<li><strong>焕然一新</strong>：我对程序的结构或是文档进行改善，从而在不改变程序的前提下改善其可读性和可修改性。</li>
</ul>


<hr />

<ul>
<li><strong>Q: a quest for quality.</strong> Here I changed the specifications of what the program should output from given input, when I learned how to improve the typographic appearance of the output.</li>
<li><strong>精益求精</strong>：在对字体版式有了更深入的理解之后，我对程序进行修改，以获得更好的输出效果。</li>
</ul>


<hr />

<ul>
<li><strong>R: a reinforcement of robustness.</strong> Whenever I realized that TEX could loop or crash in the presence of certain erroneous input, I tried to make the code bulletproof.</li>
<li><strong>百毒不侵</strong>：一旦我意识到TEX有可能在极端情况下崩溃，我就会想方设法使程序变的更加健壮。</li>
</ul>


<hr />

<ul>
<li><strong>S: a surprising scenario.</strong> Errors of type S were particularly bad bugs that forced me to change my original ideas, because of unforeseen interactions between various parts of the program.</li>
<li><strong>出乎意料</strong>：由于我最初对问题的定义或是对程序间模块的交互理解不足，导致一些无法预见的错误——这类错误往往很棘手。</li>
</ul>


<hr />

<ul>
<li><strong>T: a trivial typo.</strong> Sometimes I did&rsquo;t type the right thing when I entered the program into the computer, although my original pencil draft was correct.</li>
<li><strong>粗心大意</strong>：我在打字时会犯一些小错，以至我纸上的草稿是对的，但敲进去的是错的。</li>
</ul>


<hr />

<h2>进一步的分类</h2>

<h3>Knuth随后将这15个分类分为两大类：</h3>

<ul>
<li><strong>不可胜算</strong>、<strong>鬼使神差</strong>、<strong>差之毫厘</strong>、<strong>丢三落四</strong>、<strong>言非所指</strong>、<strong>事与愿违</strong>、<strong>百毒不侵</strong>、<strong>出乎意料</strong>和<strong>粗心大意</strong>属于程序的差错（Bugs）。</li>
<li><strong>得心应手</strong>、<strong>多快好省</strong>、<strong>虚怀若谷</strong>、<strong>各得其所</strong>、<strong>焕然一新</strong>和<strong>精益求精</strong>属于对程序的改进（Enhancements）。</li>
</ul>


<h3>然后按复杂程度把差错（Bugs）分为三类：</h3>

<h4>简单的差错</h4>

<ul>
<li><strong>粗心大意</strong>：敲错了代码。</li>
<li><strong>鬼使神差</strong>：敲串了代码。</li>
<li><strong>丢三落四</strong>：忘敲了代码。</li>
<li><strong>言非所指</strong>：踩语言的坑。</li>
<li><strong>事与愿违</strong>：中自己的坑。</li>
</ul>


<h4>复杂的差错</h4>

<ul>
<li><strong>不可胜算</strong>：算法设计不当。</li>
<li><strong>差之毫厘</strong>：数据结构维护不周。</li>
</ul>


<h4>棘手的差错</h4>

<ul>
<li><strong>百毒不侵</strong>：对错误输入处理不当而造成的问题。</li>
<li><strong>出乎意料</strong>：由于对问题的理解不足，从而导致各种诡异的问题。</li>
</ul>


<h2><a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>的不足</h2>

<p>Knuth在<a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>对TEX的错误进行了详细的分析，并对这些错误进行了系统的分类，但我认为这篇文章仍有一些不足：</p>

<ol>
<li>Knuth并未对编程错误给出应对策略。</li>
<li><a href="http://dl.acm.org/citation.cfm?id=66416">the Errors of TEX</a>一文成于1989年，其中记载的是1978年至1982年Knuth开发TEX时碰到的各种问题——30年前的编程语言和现在严重脱节。</li>
</ol>


<p>所以，我打算（不自量力的）结合自己的经验，在Knuth的分析基础上再进一步——从下篇开始，我会为每一类编程错误给出其案例，诱因和应对策略。</p>

<p>——未完待续</p>

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li><a href="http://www.weibo.com/pegong/">微博</a></li>
<li><a href="http://www.douban.com/people/figure9/">豆瓣</a></li>
</ul>


<p><a href="http://zh.lucida.me/blog/on-programming-errors-1/">原文链接</a></p>
]]></content>
  </entry>
  
</feed>
