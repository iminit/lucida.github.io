<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Learning | Lucida]]></title>
  <link href="http://zh.lucida.me/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://zh.lucida.me/"/>
  <updated>2014-12-26T15:03:03-08:00</updated>
  <id>http://zh.lucida.me/</id>
  <author>
    <name><![CDATA[Lucida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[回顾2014——还算不错的开端]]></title>
    <link href="http://zh.lucida.me/blog/2014-summary/"/>
    <updated>2014-12-26T14:51:50-08:00</updated>
    <id>http://zh.lucida.me/blog/2014-summary</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/2014-summary/">http://zh.lucida.me/blog/2014-summary/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>

<hr />

<h2>摘要</h2>

<p>这篇文章记录了我对2014年的回顾，包含一些感触，也有一些吐槽——这篇文章不会像之前的文章那么严谨——意识流——想到哪里——说到哪里。</p>

<ul>
<li><a href="#working">工作</a></li>
<li><a href="#travelling">出国</a></li>
<li><a href="#reading">读书</a></li>
<li><a href="#gaming">游戏</a></li>
<li><a href="#buying">败物</a></li>
<li><a href="#blogging">博客</a></li>
<li><a href="#planning">展望</a></li>
</ul>


<h2><a name="working">工作</a></h2>

<p>2014是我正式工作的第一年——工作对我既熟悉又陌生——在正式工作之前，我在大连<a href="http://www.avepoint.com.cn/">AvePoint</a>和<a href="http://www.microsoft.com/zh-cn/ard/default.aspx">微软亚洲工程院</a>分别有一年和两年的实习经历，大大小小的应用也写过不少；但我并未参与过正式的开发流程，实习时写的东西规模都很小（不超过1w行），技术含量也不高（没有教科书以外的算法），也没有一个资深的开发者手把手教我（基本都是自学瞎鼓捣）。简而言之——我属于<a href="http://www.mydrivingseat.com/the-blog/dabbler-obsessive-hacker-or-master/">Dabbler</a>——聊聊技术名词写几个小程序还可以，搞点正经东西就抓瞎。</p>

<p>所以2014年是我从<a href="http://www.mydrivingseat.com/the-blog/dabbler-obsessive-hacker-or-master/">Dabbler</a>走向<a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">Journeyman</a>的第一年，这一年我接触了很多真正的专业开发者（Professional Developer），也学到了很多书本中学不到的东西。</p>

<h3>专业开发者</h3>

<p>我提到我接触了很多真正的专业开发者，这里举一个例子：</p>

<p>刚刚开始工作时，我说的最多的一个短语就是"I think"——"我觉得XXX应该是YYY"</p>

<p>这时我就会被同事无情的打断——"You shouldn&rsquo;t think, you should be certain"</p>

<p>然后我就会羞愧苦逼的回去翻看文档，询问同事，直到彻底搞清楚问题为止——没有任何"I think"。</p>

<p>后来我读到<a href="http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073">Clean Coder</a>这本书，发现里面很多观点和我身边的同事的所作所为不谋而合——专业开发者——就应该是这样。</p>

<h3>代码审查</h3>

<p>Google内部提交代码必需要经过<a href="http://www.amazon.com/Google-Tests-Software-James-Whittaker/dp/0321803027">代码审查</a>——如果你要在某个目录下提交代码，你必须要获得来自代码审查者的两个Approval（准许）：Owner Approval（目录所有者的准许）和Readablity Approval（代码可读性准许），具体细节可以看这个Quora问答：<a href="http://www.quora.com/What-is-Googles-internal-code-review-policy-process">http://www.quora.com/What-is-Googles-internal-code-review-policy-process</a>。</p>

<p>在2014这一年，我的绝大多数开发知识/经验都来自代码审查——从刚开始写代码被别人“黑”的惨不忍睹，到之后慢慢可以越来越顺利的通过代码审查，再到之后获得Java Readablity（参考<a href="http://www.zhihu.com/question/19794858">C++ Readablity</a>），到现在天天审查别人的代码，这个过程我学到的开发经验比我在学校7年学到的都多。我相信在接下来的两三年我的开发经验也会来自代码审查。</p>

<p>代码审查有一个副作用——它会提升你的代码品位，使得你再也无法忍受糟糕的代码——就我个人的感受，国内技术社区90%以上的代码都是翔，5%以上的代码翔都不如——所以现在我很少看国内的技术文章。</p>

<h3>从编程到开发</h3>

<p>作为开发者，走出学校进入工作岗位最大的转变是从编程（<a href="http://en.wikipedia.org/wiki/Computer_programming">Programming</a>）转向开发（<a href="http://en.wikipedia.org/wiki/Software_development">Development</a>）——专注的不再是算法、数据结构或操作系统这些编程概念，而是产品质量、持续集成和领域知识等开发概念。</p>

<p>我并非否认计算机基础的重要性——这些基础知识是底线（Bottom line），这些东西都不会还写毛程序？作为开发者应该具备良好的编程基础，然后不断提升自己的开发技能，而不是不断的折腾算法和数据结构这些理应在学校掌握的东西。</p>

<h2><a name="travelling">出国</a></h2>

<p>之前从未想到过我会出国，然而误打误撞，2014年我先后在英国伦敦和美国加州湾区工作，见识了万恶的资本主义发源地，也见识了万恶的资本主义社会：</p>

<h2>伦敦</h2>

<p><img src="http://i.imgur.com/MiSMFrz.jpg" alt="伦敦鸟瞰" /></p>

<ol>
<li>英腔逼格很高，我努力学了一点，很受用；</li>
<li>美女很少，一般美女都来自东欧；</li>
<li>留学生很多，白富美富二代也很多；</li>
<li>常年阴雨连绵，但雨并不大；</li>
<li>英国人很绅士，坐地铁或公交时能明显体会到，不像国内那般争先恐后不守规矩；</li>
<li>贝克街221B是一个不存在的地址，我还特地去验证了一把；</li>
<li>东西很贵，貌似今年刚成为全球最贵城市；</li>
<li>是的，搞基很多，我曾在Green Park见过两名壮汉拍婚纱照；</li>
<li>只翻修不拆迁，所以伦敦街上的建筑大多都有三百年多历史，为什么不是四百年？因为当时<a href="http://en.wikipedia.org/wiki/Great_Fire_of_London">那把火</a>；</li>
<li>顺便推荐一条步行线路：London Eye俯瞰全景 &ndash;> Westminister Cathedral体验Big Ben &ndash;> Buckingham Palace观看"红卫兵" &ndash;> Picadilly Circus观看接头表演 &ndash;> Covent Garden购买手工艺品 &ndash;> Leicester Square吃中餐/日餐。</li>
</ol>


<h2>湾区</h2>

<p><img src="http://i.imgur.com/kkTeNns.jpg" alt="阳光屯小吃一条街" /></p>

<ol>
<li>美音很屌丝，也很容易懂；</li>
<li>美女很多，来历不明；</li>
<li>留学生没有码农多；</li>
<li>一年四季，阳光普照；</li>
<li>大多还不错，但不如英国人那般讲究；</li>
<li>是的，加州没有加州牛肉面；</li>
<li>物价尚可，房价涨的一逼；</li>
<li>搞基没有伦敦那么张扬；</li>
<li>大片土地闲置，既不拆迁也不翻修更不新建，大多屎黄色建筑，土的一逼；</li>
<li>还不熟悉，打算明年自驾游一把。</li>
</ol>


<h2><a name="reading">读书</a></h2>

<p>工作之后专门的阅读时间就少了很多，有时连每周10小时的阅读时间都不能保证——所以我打算在15年提高阅读时长和质量。</p>

<h3>专业类</h3>

<p>大多都是比较浅的书，所以收获一般。打算在15年读一些深入的专业书籍。</p>

<ul>
<li><a href="http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/">Effective Java</a>：Java圣经级著作，我的第一本Java书，其本身属于超越语言的作品；</li>
<li><a href="http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/">Java Concurrency in Practice</a>：系统的介绍了Java并发编程，以及如何绕过并发里的种种坑；</li>
<li><a href="http://www.amazon.com/Java-Puzzlers-Traps-Pitfalls-Corner/dp/032133678X/">Java Puzzlers</a>：分门别类的讲述了Java语言的坑，部分例子过于Artificial，但总的来说不错；</li>
<li><a href="http://www.amazon.com/Well-Grounded-Java-Developer-techniques-programming/dp/1617290068/">The Well-Grounded Java Developer</a>：一本与时俱进的Java书籍——覆盖了Java 7之后的的语言特性及JVM特性；</li>
<li><a href="http://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming/dp/1449370772/">Java 8 Lambdas</a>：系统的介绍了Java 8中的Lambda表达式，但不如Brian Goetz的<a href="http://cr.openjdk.java.net/~briangoetz/lambda/">Lambda Articles</a>深入；</li>
<li><a href="http://book.douban.com/subject/24722612/">深入理解Java虚拟机</a>：很优秀的国产JVM书籍，让我对国产技术书籍重拾信心；</li>
<li><a href="http://book.douban.com/subject/7059903/">编写高质量代码 改善Java程序的151个建议</a>：极其低劣的书籍，再度让我对国产技术书籍失去信心；</li>
<li><a href="http://www.amazon.com/Linux-Command-Line-Complete-Introduction/dp/1593273894/">The Linux Command Line</a>：非常不错的Linux Shell入门书籍，不深入，但很实用（尽管我还是觉得Shell语言就是一坨代谢聚合物）；</li>
<li><a href="http://www.amazon.com/Getting-started-Community-Experience-Distilled-ebook/dp/B00EJIZRG6/">Getting Started with Google Guava</a>：很一般的<a href="http://code.google.com/p/guava-libraries/">Google Guava</a>入门书，还不如阅读Guava的Wiki和源码来的实在；</li>
<li><a href="http://www.amazon.com/Google-Guice-Lightweight-Dependency-FirstPress/dp/1590599977/">Google Guice: Agile Lightweight Dependency Injection Framework</a>：Google最常用的IoC框架，书还可以就是有点过时，不如Guice的<a href="https://github.com/google/guice/wiki">文档</a>；</li>
<li><a href="http://www.amazon.com/Practical-Unit-Testing-JUnit-Mockito/dp/8393489393/">Practical Unit Testing with JUnit and Mockito</a>：非常好的Java单元测试书籍，每个Java开发者都应阅读此书；</li>
<li><a href="http://www.amazon.com/Bad-Tests-Good-Tomek-Kaczanowski-ebook/dp/B00IDFKRY8/">Bad Tests, Good Tests</a>：上面那本的补充；</li>
<li><a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/">The Clean Coder: A Code of Conduct for Professional Programmers</a>：成为专业开发者的必读书目，但里面有些原则在国内可能不适用——尤其是对某些996的公司；</li>
<li><a href="http://www.amazon.com/Mastering-Sublime-Text-Dan-Peleg/dp/1849698422/">Mastering Sublime Text</a>：很一般的Sublime Text教程，甚至还不如我写的<a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">教程</a>；</li>
<li><a href="http://www.amazon.com/Architecture-Open-Source-Applications/dp/1257638017/">The Architecture Of Open Source Applications</a>：我学习软件架构的入门书籍；</li>
<li><a href="http://www.amazon.com/Performance-Open-Source-Applications/dp/1304488780/">The Performance of Open Source Applications</a>：我学习提升软件性能的入门书籍；</li>
<li><a href="http://www.amazon.com/Understanding-Computation-Machines-Impossible-Programs/dp/1449329276/">Understanding Computation: From Simple Machines to Impossible Programs</a>：一本很另类的介绍计算理论（Computation Theory）的书籍，我认为如果不用Ruby这么花哨的语言效果会更好；</li>
<li><a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/">Working Effectively with Legacy Code</a>：专业软件开发者必读；</li>
<li><a href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/">The Mythical Man-Month: Essays on Software Engineering</a>：经典重读；</li>
<li><a href="http://www.amazon.com/Design-Essays-Computer-Scientist/dp/0201362988/">The Design of Design: Essays from a Computer Scientist</a>：很玄妙的书籍，因为我着实记不起来内容是什么了——也许需要再读一遍；</li>
<li><a href="http://www.amazon.com/Debugging-Indispensable-Software-Hardware-Problems/dp/0814474578/">Debugging: The 9 Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems</a>：少见的专门介绍调试的书籍，其中的原则不仅仅适用于软件开发；</li>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/">JavaScript: The Good Parts</a>：写Chrome插件时用来入门JavaScript的书籍；</li>
<li><a href="http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/">Professional JavaScript for Web Developers</a>：另一本JavaScript的书籍，废话超多，远不如上一本，不知道为什么这本书被很多人称为圣经；</li>
<li><a href="http://www.amazon.com/Programming-Language-Pragmatics-Third-Michael/dp/0123745144/">Programming Language Pragmatics</a>：超一流编程语言理论书籍，这本书会大大提升学习编程语言的速度和理解程度；</li>
<li><a href="http://www.amazon.com/Quick-Python-Book-Second/dp/193518220X/">The Quick Python Book</a>：用作Python入门，书本身很一般；</li>
<li><a href="http://www.amazon.com/Literate-Programming-Center-Language-Information/dp/0937073806/">Literate Programming</a>：重点阅读了编程错误分析的那一部分，这也是<a href="http://zh.lucida.me/blog/on-programming-errors-1/">关于编程错误的思考</a>系列的出处；</li>
<li><a href="http://www.amazon.com/Science-Programming-Monographs-Computer/dp/0387964800/">The Science of Programming</a>：经典重读；</li>
<li><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/">Structure and Interpretation of Computer Programs</a>：本来计划是完成前四章习题结果拖延症犯了看到第二章就搞别的去了，来年再战；</li>
<li><a href="http://www.amazon.com/Tour-C--Depth/dp/0321958314/">A Tour of C++</a>：为了能读懂C++，所以读了这本入门小书，简练使用；</li>
</ul>


<h3>非专业类</h3>

<p>很杂很混乱，收获尚可。</p>

<ul>
<li><a href="http://www.amazon.com/Steve-Jobs-Walter-Isaacson/dp/1451648537/">Steve Jobs</a>：每次坐飞机时都会重读教主自传，每次读到教主怒骂Android那一段时就会感叹“只恨Steve当年剿匪不力”；</li>
<li><a href="http://www.amazon.com/Universal-Principles-Design-Revised-Updated/dp/1592535879/">Universal Principles of Design</a>：简洁的设计入门书籍；</li>
<li><a href="http://www.amazon.com/Practical-English-Usage-Michael-Swan/dp/0194420981/">Practical English Usage</a>：绝好的英语语法+用法书籍；</li>
<li><a href="http://book.douban.com/subject/1229822/">中式英语之鉴</a>：系统的指出了中式英语常犯的错误，除了例子有些政治化，其它都不错；</li>
<li><a href="http://www.amazon.com/Designing-One-Color-Two-Colors/dp/0062004611/">Designing with One Color and Two Colors</a>：学习配色时看的书，属于Cookbook；</li>
<li><a href="http://book.douban.com/subject/1970428/">激荡三十年</a>：了解中国的经济史；</li>
<li><a href="http://book.douban.com/subject/4010186/">跌荡一百年</a>：同上；</li>
<li><a href="http://book.douban.com/subject/6980818/">浩荡两千年</a>：同上，btw，中国商人太惨了；</li>
<li><a href="http://book.douban.com/subject/25783654/">如何高效学习</a>：建立知识网络，打通各个学科，大概就是这样；</li>
<li><a href="http://book.douban.com/subject/20507212/">习惯的力量</a>：找到产生消极习惯的循环，引入积极的元素，产生积极习惯；</li>
<li><a href="http://book.douban.com/subject/6892579/">美国种族简史</a>：去US时前读的书籍，对Jewish、Irish、Italian、Chinese、Japanese、Mexican等种族有了大概的认识，但这本书实在太旧，我不认为它符合现状；</li>
<li><a href="http://book.douban.com/subject/24383461/">网络素养</a>：所有“网友”都应该阅读此书；</li>
<li><a href="http://book.douban.com/subject/1823751/">中国近代史</a>：非常简练的中国近代史导论——此外大赞这本书的成书时间，正好错过了所有的TG的敏感区，不然它就甭想出版；</li>
<li><a href="http://book.douban.com/subject/1467022/">上帝掷色子吗</a>：通俗的物理学演义，但我一点没觉的通俗，看了一半就困的不行；</li>
<li><a href="http://book.douban.com/subject/4113090/">我们台湾这些年</a>：普通人眼里的台湾近30年历史，很鸡肋的一书，估计是因为受限于内容审查所以很多东西不能写；</li>
<li><a href="http://book.douban.com/subject/10586741/">关键对话</a>：非常好的如何进行理性对话的书籍；</li>
<li><a href="http://www.amazon.com/Dumbbell-Training-Allen-Hedrick/dp/145044458X/">Dumbbell Training</a>：系统的哑铃训练书籍；</li>
<li><a href="http://book.douban.com/subject/1924903/">老子</a>：老祖宗的有些东西现在读起来还是挺有意思的；</li>
<li><a href="http://www.amazon.com/Mastery-Keys-Success-Long-Term-Fulfillment/dp/0452267560/">Mastery: The Keys to Success and Long-Term Fulfillment</a>：很有禅意的超一流书籍——如何在领域内做到登峰造极；</li>
</ul>


<h2><a name="gaming">游戏</a></h2>

<p>2014年的另一个变化就是从PC转向Console——事实证明Console比PC爽太多——尤其对我这种ARPG爱好者。</p>

<p>为了“抄底”，我购入了XBox 360：</p>

<ul>
<li>XBox One刚出一年游戏并不多，而 XBox360上拥有大量游戏而且价格很便宜；</li>
<li>购买一台游戏PC的价格（大致1500$）足以购买一台XBox360+50个经典游戏；</li>
<li>很多经典游戏根本看不上PC这种盗版遍地的low逼平台——例如GTA V，例如God of War；</li>
<li>Kinect。</li>
</ul>


<p>下面是我打通的游戏：</p>

<ul>
<li><a href="http://www.metacritic.com/game/xbox-360/grand-theft-auto-v">GTA V</a>：史上最强神作，为了GTA V买一个主机都是值得的；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/grand-theft-auto-iv-the-complete-edition">GTA VI The Complete Edition</a>：GTA V之前的神作，之前在PC上low逼的打过盗版，所以现在特意买了正版重新打一遍；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/batman-arkham-asylum">Batman Arkham Asylum</a>：非常酷的动作解谜游戏，之前在PC上low逼的打过盗版，所以现在特意买了正版重新打一遍；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/batman-arkham-city">Batman Arkham City</a>：大大超越前作，可惜游戏时长太短；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/asuras-wrath">Asura&rsquo;s Wrath</a>：因为<a href="http://v.youku.com/v_show/id_XNTE0ODA2NDAw_rss.html">西游降魔篇抄袭</a>所以入了这款游戏——游戏本身很糟糕，基本就是QTE完形填空——整个游戏打下来跟看一遍日漫差不多；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/prototype-2">Prototype 2</a>：砍砍砍，跑跑跑，杀杀杀，然后通关，很无聊；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/fable-ii">Fable 2</a>：节奏很慢，但风格不错，喜欢里面的英音；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/red-dead-redemption">Red Dead Redemption</a>：GTA的西部版——GTA V里的很多元素都来自这里，僵尸DLC非常酷；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/darksiders-ii">Darksiders 2</a>：除了没有第一部紧凑，其它还可以；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/diablo-iii-ultimate-evil-edition">Diablo 3 Ultimate Evil</a>：没有想到Diablo这种ARPG在主机上的效果和手感居然能超越PC；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/borderlands">Borderlands</a>：很另类的FPS，这款游戏里我学到的更多的是如何有手柄控制准星 &ndash;_&ndash;#；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/nike+-kinect-training">Nike+Sports</a>：非常专业的Kinect运动游戏，现在每天都会练习30分钟；</li>
<li><a href="http://www.metacritic.com/game/xbox-360/ufc-personal-trainer-the-ultimate-fitness-system">UFC Training</a>：不那么专业的UFC运动训练，偶尔会玩一玩。</li>
</ul>


<p>附上游戏全家福：</p>

<p><img src="http://i.imgur.com/Td2xphs.jpg" alt="XBox 360 Games" /></p>

<h2><a name="buying">败物</a></h2>

<h3><a href="http://www.bose.com/controller?url=/shop_online/speakers/computer_speakers/companion_20/index.jsp">Bose C20</a></h3>

<p><img src="http://i.imgur.com/sFNWZ3s.jpg" alt="Bose C20" /></p>

<p>第一次用Bose产品，很惊讶这么小的体积居然可以发出如此大的声音，看电影尤其爽。</p>

<h3><a href="http://www.amazon.com/Xbox-360-500GB-Call-Duty-Bundle/dp/B00NNU07RU/">XBox 360 + Kinect</a></h3>

<p><img src="http://i.imgur.com/8cxU0iU.png" alt="XBox 360 + Kinect" /></p>

<p>除非你是RTS重度玩家，否则主机要比PC爽太多——既没有年年升级的烦恼，也没有low逼盗版的负罪感。</p>

<h3><a href="http://www.amazon.com/Parrot-Wireless-Cancelling-Headphones-Control/dp/B0081TH24O/">Parrot Zik</a></h3>

<p><img src="http://i.imgur.com/8cxU0iU.png" alt="Parrot Zik" /></p>

<p>造型很奇特，但戴上去却格外舒适——内置降噪以及音效调节，触控操作非常人性化，唯一的不足就是不能记忆音量——每次都需要重新调节音量。</p>

<h3><a href="http://www.urbanears.com/headphones/plattan/plattan-black/">Urbanears Plattan</a></h3>

<p><img src="http://i.imgur.com/iynkuSI.jpg" alt="Urbanears Plattan" /></p>

<p>源自北欧，伦敦使用率最高的出街耳机，逼格秒杀一票<a href="http://cn.beatsbydre.com/">2B</a>。</p>

<h3><a href="http://bowflex.com/bowflex-home-gyms-us/accessories/freeweights/prdcd~100131/Bowflex+SelectTech+552+Dumbbells.jsp">Bowflex 552</a></h3>

<p><img src="http://i.imgur.com/PSy2aRz.jpg" alt="Bowflex 552" /></p>

<p>到US之后购入，非常好用的家用哑铃，从此再也不用在换铃片上费时间。</p>

<h3><a href="http://www.amazon.com/Microsoft-Sculpt-Ergonomic-Desktop-L5V-00001/dp/B00CYX54C0/">Microsoft Sculpt Ergonomic Desktop</a></h3>

<p><img src="http://i.imgur.com/x0Mycth.jpg" alt="Microsoft Sculpt Ergonomic Desktop" /></p>

<p>造型炫酷，使用舒适，开发者必备。</p>

<h3><a href="http://www.amazon.com/Microsoft-Surface-Pro-Intel-Core/dp/B00KHQWRZS/">Surface Pro 3</a></h3>

<p><img src="http://i.imgur.com/TvD2Rbg.jpg" alt="Surface Pro 3" /></p>

<p>非常炫酷的高性能平板，看文献秒杀iPad，写代码干翻超级本——唯一不足是<a href="http://answers.microsoft.com/en-us/surface/forum/surfpro3-surfusingpro/excessively-loud-fan-constant-overheating-during/1efa253a-f7f2-486b-a891-5633738b8532">散热极差</a>，购买前要小心。</p>

<h3><a href="http://www.microsoftstore.com/store/msusa/en_US/pdp/productID.307449200">Lumia 1520</a></h3>

<p><img src="http://i.imgur.com/Gio4QFq.jpg" alt="Lumia 1520" /></p>

<p>买来之后一直当相机用。</p>

<h3><a href="http://www.thatcompanycalledif.com/">The Company Called If</a></h3>

<p><img src="http://i.imgur.com/9GwlLfx.jpg" alt="Waterstones" /></p>

<p>在伦敦时我经常在<a href="http://www.waterstones.com/waterstonesweb/">Waterstones</a>蹭书，所以接触了<a href="http://www.thatcompanycalledif.com/">The Company Called If</a>这个专产阅读周边的英国本土品牌。</p>

<h4><a href="http://www.thatcompanycalledif.com/17/book-holders/little-book-holder">Little Book Holder</a></h4>

<p><img src="http://i.imgur.com/8CJQFPP.jpg" alt="Little Book Holder" /></p>

<p>非常可爱的书夹，美观性大于实用性，适合看书慢或边看书边笔记的同学。</p>

<h4><a href="http://www.thatcompanycalledif.com/64/reference-bookmarks/multi-reference-bookmarks">Multi-Reference Bookmarks</a></h4>

<p><img src="http://i.imgur.com/GAWIVQZ.jpg" alt="Multi-Reference Bookmarks" /></p>

<p>美观性和实用性兼具的多功能书签，不但能指明页数，还可以指明行数。</p>

<h4><a href="http://www.thatcompanycalledif.com/183/book-holders/the-brilliant-reading-rest">The Brilliant Reading Rest</a></h4>

<p><img src="http://i.imgur.com/JV3gQ7a.jpg" alt="The Brilliant Reading Rest" /></p>

<p>敦实的书架，阅读大部头书时非常好用。</p>

<h4><a href="http://www.thatcompanycalledif.com/20/book-holders/fold-away-book-rest">Fold-Away Book Rest</a></h4>

<p><img src="http://i.imgur.com/emKItSL.jpg" alt="Fold-Away Book Rest" /></p>

<p>很方便的折叠书架，适合中型书籍。</p>

<h3><a href="http://www.fiftythree.com/pencil">Pencil</a></h3>

<p><img src="http://i.imgur.com/Ew7nydU.jpg" alt="Pencil" /></p>

<p><a href="http://www.fiftythree.com/paper">Paper</a>是iPad上的超一流应用，加上<a href="http://www.fiftythree.com/pencil">Pencil</a>更是如虎添翼，木质<a href="http://www.fiftythree.com/pencil">Pencil</a>更是逼格爆表。</p>

<h2><a name="blogging">博客</a></h2>

<p>从2014年我开始写独立博客（<a href="http://zh.lucida.me/">http://zh.lucida.me/</a> ）——一共<a href="http://zh.lucida.me/blog/archives/">27篇</a>，我的<a href="http://zh.lucida.me/blog/my-first-article/">第一篇博文</a>说明了我写独立博客的原因。</p>

<p>刘未鹏的一篇关于<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">为什么要写博客</a>的文章对我影响很大——所以我决定写价值博客——而且是超一流的原创价值博客。</p>

<h3>历程</h3>

<p>由于很长时间没有写作，所以我前期的博文往往篇幅较短，而且叙事混乱，比如<a href="http://zh.lucida.me/blog/memoirs-on-my-postgraduate-life/">从挣钱的角度回忆下自己的研究生三年</a>和<a href="http://zh.lucida.me/blog/on-suppressing-the-internet-addiction/">网络上瘾及其解决方法</a>，都属于相当糟糕的文章。</p>

<p>从<a href="http://zh.lucida.me/blog/on-reading-books/">如何阅读书籍</a>开始，我开始使用统一的模式编写博客——提出问题——分析问题——解决问题。在此篇博文之后的技术博文走的都是这个套路：例如<a href="http://zh.lucida.me/blog/how-to-implement-an-interpreter-in-csharp/">90分钟实现一门编程语言——极简解释器教程</a>和<a href="http://zh.lucida.me/blog/levels-on-learning-and-using-technologies/">学习&amp;使用技术的四种层次</a>。</p>

<p>尽管我非常费力的去写博文，然而访问量却一直不理想——大致一天二三十十的访问，其中两三成还来自我自己。（-_-）</p>

<p>转折点来自<a href="http://zh.lucida.me/blog/on-learning-algorithms/">我的算法学习之路</a>，这篇半经历半吐槽的文章被各种转发推荐，不但让我的博客日访问量上了三位数，还给我带来了四位数的微博关注和豆瓣关注。但我自己很疑惑——这篇文章无论在严谨程度还是技术含量上都不如前面的几篇，但它的阅读量反而却远超前几篇博文的总和。如果你在Google上搜<a href="https://www.google.com.hk/#safe=strict&amp;q=%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0">“算法学习”</a>、<a href="https://www.google.com.hk/#safe=strict&amp;q=%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95">“学习算法”</a>或<a href="https://www.google.com.hk/#safe=strict&amp;q=%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95">“如何学习算法”</a>，<a href="http://zh.lucida.me/blog/on-learning-algorithms/">我的算法学习之路</a>都排在第一位。</p>

<p>我甚至猜测是不是这种诙谐的文章很有市场，于是搞了一篇<a href="http://zh.lucida.me/blog/stories-of-masturbations/">打飞机故事集</a>然后满怀希望的等待访问量再创新高。</p>

<p>结果连个P都没有——看来我的猜测是错的，至少没人会为单纯的诙谐买账。</p>

<p>于是我尝试用另一种方式提高访问量——热门话题。于是就有了<a href="http://zh.lucida.me/blog/on-the-keynote-of-t-one/">关于锤子手机和锤子手机发布会</a>和<a href="http://zh.lucida.me/blog/an-introduction-to-swift/">来自苹果的编程语言——Swift简介</a>这两篇文章，效果很不错。</p>

<p>访问量稳定之后，我开始尝试一些连载文章，比如<a href="http://zh.lucida.me/blog/design-of-design-0-prologue/">设计中的设计</a>和<a href="http://zh.lucida.me/blog/on-programming-errors-0/">关于编程错误的思考</a>这两个系列，尽管这系列文章的访问量不高，但我在其中学到了很多东西。（是的，这两个系列我还没写完，来年再填）</p>

<p>为了学习<a href="http://www.sublimetext.com/">Sublime Text</a>，我写了<a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">Sublime Text 全程指南</a>这篇教程，现在它已经是最热门的Sublime Text中文教程——在Google上搜索<a href="https://www.google.com.hk/#safe=strict&amp;q=sublime+text+%E6%95%99%E7%A8%8B">“Sublime Text 教程”</a>或<a href="https://www.google.com.hk/#safe=strict&amp;q=sublime+text+%E6%8C%87%E5%8D%97">“Sublime Text 教程”</a>它都排在第一位，而<a href="https://www.google.com.hk/#safe=strict&amp;q=sublime+text">Google搜索“Sublime Text”</a>这篇教程则紧随Sublime Text官网之后。</p>

<p>再之后，我翻译了Brian Goetz的<a href="http://zh.lucida.me/blog/java-8-lambdas-insideout-language-features/">Lambda Articles</a>，并回顾了我以前写的<a href="http://zh.lucida.me/blog/top-code-offline-browser/">Top Coder浏览器</a>和<a href="http://zh.lucida.me/blog/lucida-pinyin-converter/">Lucida拼音库</a>。</p>

<p>总之，2014年是一个不错的开端。从2015年开始，维持<a href="http://zh.lucida.me/">中文博客</a>的同时，我会开始编写<a href="http://en.lucida.me/">英文博客</a>——相信在明年会有我的英文博文被“翻译”回中文，到时一定会很有趣。</p>

<h2><a name="planning">展望</a></h2>

<p>2015年有很多事情要做，但主要目标（Primary Objectives）很简单——3件事，按优先级排序：</p>

<ol>
<li><strong>减重</strong>——工作之后体重稳步增长到160斤（身高173cm），我实在不想成为一个胖逼（胖子是没有前途的！！），所以15年的目标是把体重控制回135斤以内；（实际上已经锻炼了1个多月，减掉了4斤）；</li>
<li><strong>升职</strong>——是时候尝试下了 :&ndash;) ；</li>
<li><strong>写书</strong>——早在一年半之前<a href="http://www.phei.com.cn/">电子工业出版社</a>就曾经联系过我写一本关于程序员求职的书，原计划是去年8月出版（瀑布汗，实在对不住<a href="http://www.weibo.com/208686914">@永恒的侠少</a>），结果一直拖到现在（一方面是懒，另一方面是觉得实力不足）。工作一年多写了一年博客之后，经验和写作能力都提升不小，是时候把这个坑填上了。</li>
</ol>


<p>次要目标（Secondary Objectives）包括但不限于：</p>

<ol>
<li>撰写英文博客——至少做到三篇进入<a href="http://www.reddit.com/r/programming">Reddit Programming</a> Top 5；</li>
<li>完成SICP前四章习题；</li>
<li>完成Merriam Webster Vocabulary Builder里的单词；</li>
<li>至少做3次Tech Talk；</li>
<li>阅读5本以上的软件开发领域的经典书籍；</li>
<li>搞定Python Readability；</li>
<li>重新精读<a href="http://www.amazon.com/Programming-Language-Pragmatics-Third-Edition/dp/0123745144">Programming Language Pragmatics</a>，构建自己的程序设计语言知识框架；</li>
<li>……</li>
</ol>


<p>以上。</p>

<hr />

<p>作者：<a href="http://zh.lucida.me/">Lucida</a></p>

<ul>
<li>微博：<a href="http://www.weibo.com/pegong/">@peng_gong</a></li>
<li>豆瓣：<a href="http://www.douban.com/people/figure9/">@figure9</a></li>
</ul>


<p>原文链接：<a href="http://zh.lucida.me/blog/2014-summary/">http://zh.lucida.me/blog/2014-summary/</a></p>

<p>本文谢绝转载，如需转载需征得作者本人同意，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何阅读书籍]]></title>
    <link href="http://zh.lucida.me/blog/on-reading-books/"/>
    <updated>2014-03-15T13:05:35-07:00</updated>
    <id>http://zh.lucida.me/blog/on-reading-books</id>
    <content type="html"><![CDATA[<h2>摘要</h2>

<p>这篇文章从如何阅读书籍出发，简单讨论了如何选择书籍、是否阅读原版和阅读数量这几个常见问题，然后自己的阅读问题进行了分析和总结。</p>

<h2>注意</h2>

<ol>
<li>“如何阅读”指“What to read”而非“How to read”，Mortimer J. Adler的<a href="http://book.douban.com/subject/1013208/">怎样阅读一本书</a>对How to read有着精彩的描述。</li>
<li>“书籍”指非小说（Non-fiction）类书籍。</li>
</ol>


<h2>目标</h2>

<p>我是一个功利主义者（<a href="http://en.wikipedia.org/wiki/Utilitarianism">Utilitarianism</a>），因此我认为阅读的目标在于为自己创造实际价值，所以：</p>

<ol>
<li>我不会因为某本书看起来很有趣就去阅读（机会成本）。</li>
<li>也不会因为很多人推荐某本书就去阅读（从众）。</li>
<li>更不会因为某本书难就去阅读（追求智商优越感）</li>
</ol>


<p>一本书值得阅读，当且仅当：</p>

<ol>
<li>它可以直接为我创造价值。</li>
<li>它可以间接为我创造价值。</li>
</ol>


<p>我的阅读目标：</p>

<blockquote><p>形成T型知识结构：专业知识尽可能深入，专业周边知识尽可能精炼。</p></blockquote>

<!-- more -->


<h2>如何选择？</h2>

<h3>专业书籍</h3>

<blockquote><p>专业知识尽可能深入。</p></blockquote>

<p>我是一个软件开发者（Software Developer），因此这里的专业书籍均和软件开发有关。</p>

<p>这里介绍我自己用的两种方法：</p>

<h4>根据引用列表</h4>

<p>从一本经典书籍出发，深度优先遍历它的引用列表，通过书评和摘要了解这些引用书籍，再根据自己的实际情况决定自己的阅读次序。</p>

<p>这里以<a href="http://book.douban.com/subject/1477390/">代码大全</a>为例（为了方便和一致性，这里使用英文书名）：</p>

<p>```
Code Complete：软件构建全程最佳实践指南。
|
|&mdash;&mdash;How to Solve it：系统解决问题。
|
|&mdash;&mdash;Conceptual Blockbusting：跳出思维的壁垒。
|
|&mdash;&mdash;Mythical Man Month：软件工程不能做什么。
|
|&mdash;&mdash;Programming Pearls：极简算法手册。</p>

<pre><code> |
 |----The Science of Programming：编写正确的程序。
 |
 |----Writing Efficient Programs：编写高效的程序。
</code></pre>

<p>|
|&mdash;&mdash;Pragmatic Programmer：高效程序员的实践。
|
|&mdash;&mdash;Refactoring：如何改进自己的代码。
|
|&mdash;&mdash;Programming on Purposes：用正确的编程模式处理问题。
|
|&mdash;&mdash;Software Tools：用合适的抽象封装复杂度。</p>

<pre><code> |
 |----The Practice of Programming：极简编程风格指南。
      |
      |---- Writing Solid Code：减少调试的时间。
      |
      |---- Elements of Programming Style：极简编程风格指南。
</code></pre>

<p>```</p>

<p>可以发现，通过<a href="http://book.douban.com/subject/1477390/">代码大全</a>一本书，经过短短两层引用联系，几乎可以找到2004年以前所有软件开发的经典书籍。事实上，我阅读的80%以上的软件开发经典书籍，都源自于<a href="http://book.douban.com/subject/1477390/">代码大全</a>的引用列表。</p>

<p>这种方法的好处：</p>

<ul>
<li>简单直接：相对于从茫茫书海里找出10本经典书籍，找1本经典书籍再从它的引用列表里面找到20本经典书籍要容易的多。</li>
<li>质量保证：靠谱书籍的引用书籍的质量一般都很高。</li>
<li>发现一些被忽视的经典：相当一部分的书籍随着时间的流逝而淡出人们的视野，但这并不代表它们本身没有价值，例如：

<ul>
<li><a href="http://book.douban.com/subject/1989284/">Programming on Purposes</a></li>
<li><a href="http://book.douban.com/subject/1815459/">Software Tools</a></li>
<li><a href="http://book.douban.com/subject/2350559/">The Science of Programming</a></li>
<li><a href="http://book.douban.com/subject/1456967/">Writing Solid Code</a></li>
<li><a href="http://book.douban.com/subject/1768600/">Writing Efficient Programs</a></li>
<li>等等&hellip; 这些书或者绝版，但它们都对我的软件开发理念产生了巨大影响。</li>
</ul>
</li>
<li>形成知识体系：引用书籍彼此具有天然的联系，这使得创建知识体系更加容易。</li>
</ul>


<p>我认为这种方法适用于任何需要严肃阅读的领域：</p>

<ol>
<li>锚点：找到一本经典书籍。</li>
<li>撒网：了解该书引用列表中的书籍。</li>
<li>收网：根据自己实际需要，精读相关书籍。</li>
</ol>


<h4>根据作者</h4>

<p>这里以计算机书籍为例（以下仅代表个人口味）：</p>

<ol>
<li>Richard Stevens：善。</li>
<li>Brian Kernighan：极善。</li>
<li>Deitel Series：翔。</li>
<li>Bruce Eckel：废话连篇。</li>
<li>Jon Bentley：善。</li>
<li>Andrew S Tanenbaum：大善。</li>
<li>Jeffrey D Ullman：善。</li>
<li>P.J. Plauger：大善。</li>
<li>Robert C Martin：善。</li>
<li>Bjarne Stroustrup：善，但略神叨（神侃世界观方法论有点顶不住）。</li>
<li>Martin Fowler：善，但略唠叨。</li>
<li>Ron Jeffries：翔（好吧我是故意来黑的，尼玛连个<a href="http://devgrind.com/2007/04/25/how-to-not-solve-a-sudoku/">Sudoku</a>都解不出来写毛程序）</li>
</ol>


<p>这种方法的问题在于需要一定阅读经验，但是它非常有效——以至于不用看内容就对书的质量有七八成把握。</p>

<h3>非本专业书籍</h3>

<blockquote><p>专业周边知识尽可能精炼。</p></blockquote>

<ol>
<li>对于专业周边知识，了解关键概念及指导思想即可。</li>
<li>不需要，也没有必要对专业周边知识进行深入了解。</li>
<li>&ldquo;Know what&rdquo; is enough, &ldquo;Know how&rdquo; is expensive.</li>
</ol>


<p>以我2年前编写手机应用，学习用户体验为例：</p>

<ol>
<li>分别在现实中（身边有几个很不错的交互设计师）和线上（Quora和知乎）进行提问和搜索，得到一个书单。</li>
<li>按照下面的原则过滤书单：

<ul>
<li>去掉教科书和大部头。</li>
<li>去掉包含大量原理或论证的书籍。</li>
<li>保留结论型书籍。</li>
<li>保留指南型书籍。</li>
</ul>
</li>
<li>总结出书单，迅速的阅读并找到关键点。

<ul>
<li><a href="http://book.douban.com/subject/3323633/">给大家看的设计书</a>：CRAP原则，字体与配色。</li>
<li><a href="http://book.douban.com/subject/4606471/">设计心理学</a>：心智模型，心智摩擦，最小惊讶。</li>
<li><a href="http://book.douban.com/subject/1493316/">交互设计之路</a>：为什么需要交互，交互有哪些坑。</li>
<li><a href="http://book.douban.com/subject/4254166/">Tapworthy</a>：具有实际操作性的移动平台交互设计指南。</li>
</ul>
</li>
</ol>


<p>了解设计的人可能认为上面的书单过于初级——没错，它们都是结论型或指南型书籍，没有原理，也没有论证——但这正是对于我这样的非专业者所需要的书籍：我不需要知道这些知识是怎么来的，知道怎么用足矣。</p>

<p>此外，受价值驱动，而非兴趣——大多数情况下兴趣只是把自己脱离当前困境的接口。</p>

<h3>学习型书籍</h3>

<p>学习型书籍是一种元（Meta）方法书籍：这类书籍用于提升学习能力，换句话说，就是缩短吸收知识所需要的时间。</p>

<p>这类书籍我只读过下面的几本，效果有但不明显：</p>

<ul>
<li><a href="http://book.douban.com/subject/2345548/">学习之道</a>：冥想，体会。</li>
<li><a href="http://book.douban.com/subject/1013208/">如何阅读一本书</a>：检视阅读，主题阅读。</li>
<li><a href="http://www.scotthyoung.com/learnmorestudyless/">Learn more, study less</a>：建立知识体系及联系。</li>
</ul>


<p>需要注意的是，不要陷入到寻求最优学习方法的误区——Best is the worthest enemy of better。</p>

<h2>阅读原版？</h2>

<h3>如何在翻译版和原版做选择？</h3>

<ol>
<li>优先选择翻译版。计算机书籍这种描述精确知识的书籍更是如此。</li>
<li>此外，如果阅读中出现难以理解的问题，不要下意识的把其归咎于翻译问题——多数情况是理解问题。</li>
</ol>


<h3>为什么还有那么多人阅读原版？</h3>

<ol>
<li>因为翻译版还没出版。</li>
<li>知识的价值有其时效性。</li>
<li>逼格。</li>
</ol>


<h2>越多越好？</h2>

<p>我经常逛豆瓣，豆瓣有一个很有意思的现象就是人们喜欢去比较自己每年读书的数量，或者是截图炫耀自己读过几千本书云云。</p>

<p>我在这里酸一下：书的数量并没有什么参考价值，就好比无法用盖一栋大楼的砖数评价这栋大楼的质量；换个说法，Effort不等于Progress。</p>

<blockquote><p>关键在于读过书的质量，吸收的程度，以及创造的价值。</p></blockquote>

<p>此外，盲目追求读书的数量会带来另一个问题——浅尝辄止。本应花在专业书籍上的时间被分配到其它无关紧要的事情上，导致该学好的没学好，没必要的学了一滩但用不上。</p>

<h2>总结</h2>

<ol>
<li>形成T型知识结构：专业知识尽可能深入，专业周边知识尽可能精炼。

<ul>
<li>按照引用列表和作者深入阅读专业书籍。</li>
<li>利用结论型/指南型书籍精炼阅读专业周边书籍。</li>
<li>不断强化自己的按需学习能力。</li>
</ul>
</li>
<li>不一定非要阅读原版。</li>
<li>读书并非多多益善。</li>
<li>读书之前回答下面几个问题：

<ul>
<li>这本书能给自己带来什么改变？</li>
<li>自己是否需要这种改变？</li>
<li>如果均为Yes，继续；如果有一个No，砍掉。</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络上瘾及其解决方法]]></title>
    <link href="http://zh.lucida.me/blog/on-suppressing-the-internet-addiction/"/>
    <updated>2014-03-09T10:14:28-07:00</updated>
    <id>http://zh.lucida.me/blog/on-suppressing-the-internet-addiction</id>
    <content type="html"><![CDATA[<h2>症状</h2>

<h3>起床后</h3>

<p>拿起手机，微博->论坛A->论坛B->知乎->人人，大概20分钟。</p>

<h3>工作中</h3>

<p>大概每隔半小时刷一下微博或论坛，点进去看两分钟再切回来。</p>

<h3>睡觉前</h3>

<p>拿起手机，微博->论坛A->论坛B->知乎->人人->草榴（-_-），大概30分钟。</p>

<h2>原因</h2>

<h3>智能手机带来的极其便利的信息可访问性</h3>

<p>平板和智能手机使互联网的可访问性（accessibility）提升了至少两个数量级——三年前我的NOKIA E51只能在WIFI环境下浏览简单的文字信息，而现在我的iPhone5可以无时无刻的阅读/观看互联网上几乎所有的信息，得益于4G，即便是包含大量图片甚至视频的信息也可以轻松阅读。</p>

<h3>碎片化时间不知如何处理</h3>

<p>无论是工作还是学习，都会有疲倦或无聊的时刻，大概10分钟左右。</p>

<p>微博这种碎片化信息的出现正好填补了碎片化时间。但比较恶心的是这种东西会上瘾——慢慢的它会占据越来越多的时间：清晨，睡眠甚至路上和正常阅读的时间。</p>

<h3>长时间从事同一种工作带来的无聊感</h3>

<p>无论多么有激情有兴趣，长时间从事同一种工作总会无聊的，低智力门槛的社交网络就成了一个打发时间的好选择。</p>

<p>然后时间就都耗里面了。-_&ndash;</p>

<!-- more -->


<h2>现实 V.S. 虚拟</h2>

<p>人是社会性动物，社会性动物通过与其他对象建立联系来确定自己的存在感，也就是交流（Communication），现实和虚拟中都是如此。交流包括一对一交流和一对多交流：现实中，一对一交流通过谈话/电话/信件，一对多交流通过电视/广播；虚拟中，一对一交流通过IM（Instant Messenger），一对多交流通过微博/论坛/博客。</p>

<h3>一对一交流：</h3>

<ol>
<li>现实中，一对一交流通过谈话/电话/信件，一对一交流通过IM（Instant Messenger）。</li>
<li>现实的一对一交流大多无状态——双方的交流同时开始，同时结束。虚拟的一对一交流大多有状态——双方的交流可以从某一方开始，然后若干小时后另一方看到消息回复，然后如此继续。</li>
<li>现实中的一对一交流需要考虑对方的状态——也就是交流需要建立在双方都有时间的基础上；虚拟的一对一交流无需考虑对方的状态，有意交流的一方可以随时给对方发送信息。</li>
</ol>


<p>虚拟带来的问题：</p>

<ol>
<li>任何人都可以与你交流，无论你愿意与否。</li>
<li>你可以与任何人交流，无论是否值得。</li>
<li>可能会陷入一种等待交流的焦虑中。</li>
</ol>


<h3>一对多交流：</h3>

<ol>
<li>现实的一对多交流需要大量人力物力（广播/电视/报纸），虚拟的一对多交流几乎零成本（微博/博客/社交网络）。</li>
<li>现实的一对多交流需要信息审核/证伪，虚拟的一对多交流几乎没有信息审核。</li>
<li>现实的一对多交流中接收方是完全被动的，虚拟的一对多交流接收方和广播方之间可以有交互。</li>
</ol>


<p>虚拟带来的问题：</p>

<ol>
<li>没有审核带来的大量低质量无意义信息（通常会以一种很有趣或是令人热血沸腾的形式出现）。</li>
<li><a href="http://book.douban.com/subject/1012611/">乌合之众</a>，最热门的信息不是最有价值的，而是吵的最响（或是争议最多）的。</li>
<li>与广播方（例如名人）的交流会带来成就感，也会使自己陷入等待回复的焦虑中。</li>
<li>可能会陷入一种不断查看新信息（尽管这些信息毫无意义）的焦虑中。</li>
</ol>


<h2>解决方法</h2>

<p>为此在豆瓣阅读买了一本<a href="http://book.douban.com/subject/24383461/">网络素养</a>，原版：<a href="http://www.amazon.com/Net-Smart-How-Thrive-Online/dp/0262526131/">Net Smart: How to thrive online</a>。</p>

<p><img src="http://img5.douban.com/lpic/s26842036.jpg" title="网络素养" alt="网络素养" /></p>

<p><img src="http://ecx.images-amazon.com/images/I/41LRFD-SVlL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_SX385_SY500_CR,0,0,385,500_SH20_OU02_.jpg" title="Net Smart" alt="Net Smart" /></p>

<p>这本书废话极多，关键的两点：控制注意力，鉴别垃圾信息。</p>

<h3>控制注意力</h3>

<ul>
<li>下意识的控制注意力，可以通过关注自己的呼吸来调节。</li>
<li>即便忽略几条微博几条信息，也不会对生活造成多大影响。</li>
<li>此外可以使用冥想提升自己的集中力（Focus）。</li>
<li>番茄工作法（没看明白要点，25分钟休息一次是什么原理，如果这样岂不是更不靠谱）。</li>
</ul>


<h3>鉴别垃圾信息</h3>

<ul>
<li>冷静面对夸张的标题，此类信息一般有意断章取义，或是掩盖上下文。</li>
<li>恰当的使用三点式验证争议信息：使用三个不同可信来源验证信息的有效性。</li>
<li>选取可信/有效/有价值的信息来源，屏蔽哗众取宠/断章取义的信息源。</li>
</ul>


<h3>集中时间处理社交网络</h3>

<ul>
<li>在固定的时间段（例：12:40 &ndash; 13:10, 20:20 &ndash; 21:00）处理社交网络信息，而非随时随地的查看状态。</li>
<li>如有特别需求，可以编写Crawler来发送Reminder邮件，替代人工轮询。</li>
</ul>


<h2>用不上瘾的行为填充碎片化时间</h2>

<p>碎片化时间可以进行其它益智或体育活动，包括但不限于：</p>

<ul>
<li>拆解/还原九连环。</li>
<li>单手还原魔方。</li>
<li>背诵单词。</li>
<li>绘画。</li>
<li>乒乓。</li>
<li>桌球。</li>
</ul>


<h2>尝试其它活动</h2>

<p>为了得到新鲜感，包括但不限于：</p>

<ul>
<li>学习自己感兴趣但不了解的技术（例如ANTLR）或学科（例如经济/心理学）。</li>
<li>尝试集体运动（例如攀岩，射箭）。</li>
<li>尝试旅行（例如在周末去荷兰、芬兰或瑞典进行两日游）。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TARQIE——一种量化成长的方法（上）]]></title>
    <link href="http://zh.lucida.me/blog/tarqie-a-quantized-continous-growing-approach/"/>
    <updated>2014-03-02T15:31:27-08:00</updated>
    <id>http://zh.lucida.me/blog/tarqie-a-quantized-continous-growing-approach</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>工作到现在大概三个多月，但始终感觉有些不对——没有之前高速成长的感觉，换句话说，就是感觉自己相比三个月之前没有多大进步。</p>

<p>这是一个很危险的讯息——如果三个月还没感受到实质性的成长，那么就相当于倒退，尤其还是在Google这种奇人遍地的公司。</p>

<p>反复思考后发现自己现在掉到几个怪圈里——</p>

<h3>选择瘫痪（Analysis Paralysis）</h3>

<ol>
<li>想做事情A，做了一小半。</li>
<li>想做事情B。</li>
<li>发现事情C也有必要搞。</li>
<li>结果A，B，C都没有搞定。</li>
<li>陷入深深的自责。</li>
<li>回到步骤A。</li>
</ol>


<h3>呆滞沉浸（Dumb Dump）</h3>

<ol>
<li>看着电脑屏幕发呆。</li>
<li>或者不停的刷微博。</li>
<li>或者开始看一部早已经看过的美剧。</li>
<li>或者撸来撸去。</li>
<li>总之就是一种知道不该继续但又停不下来的感觉。-_&ndash;</li>
</ol>


<h3>拖延（Procrastination）</h3>

<ol>
<li>无法持续一件事情。（比如看书或是锻炼）</li>
<li>缺乏行动力，做事之前束手束脚。</li>
</ol>


<h2>分析</h2>

<p>回想自己过去并不是这个样子——不断成长（Continuous Growing）是自己过去几年的关键字，某种上来所自己有一种强迫症，极端的说：</p>

<blockquote><p>如果自己大脑里面一半都是半年以前的东西，那么证明自己这半年什么都没做。</p></blockquote>

<!-- more -->


<p>但自己现在处于一个更好的环境，没有理由比之前做的差。于是我决定从之前的成功经历里找到答案，试着用简短的关键字回顾自己前10年的几个关键点：</p>

<h3>关键点（Milestones）</h3>

<h4>高考</h4>

<ul>
<li>目标

<ol>
<li>考上一个不错的大学。</li>
</ol>
</li>
<li>量化

<ol>
<li>考到年级60名以内。</li>
<li>或者是班级第一。</li>
</ol>
</li>
<li>改进

<ol>
<li>海量习题练习。</li>
<li>规律作息。</li>
<li>每天至少踢腿二十分钟。</li>
</ol>
</li>
<li>验证

<ol>
<li>月考成绩。</li>
<li>模拟成绩。</li>
</ol>
</li>
</ul>


<h4>考研</h4>

<ul>
<li>目标

<ol>
<li>考上北航计算机系。</li>
</ol>
</li>
<li>量化

<ol>
<li>超过提档线50分。</li>
</ol>
</li>
<li>改进

<ol>
<li>海量习题练习。</li>
<li>规律作息。</li>
<li>禁欲（即停止手淫，保存精力）。</li>
</ol>
</li>
<li>验证

<ol>
<li>前期：监测学习进度。</li>
<li>后期：各种模拟试卷，给自己打分。</li>
</ol>
</li>
</ul>


<h4>找工作</h4>

<ul>
<li>目标

<ol>
<li>找到一个不错的外企工作。</li>
</ol>
</li>
<li>量化

<ol>
<li>解答Top Coder D2L1和D1L2区段的题目。</li>
<li>在纸上流畅写出可运行的算法C代码。</li>
</ol>
</li>
<li>改进

<ol>
<li>每天练习Top Coder一道大题，若干道小题。</li>
<li>用EOP的思路编写纸上代码。</li>
</ol>
</li>
<li>验证

<ol>
<li>找到MS正式员工为自己做模拟面试+评估。</li>
<li>独立解答CareerCup上7成以上的编程题目。</li>
<li>不断拿到新的Offer。</li>
</ol>
</li>
</ul>


<h3>总结</h3>

<p>我惊奇的发现自己找到了一个和《机器学习》里几乎雷同的模型：</p>

<ul>
<li>目标（TARget）：一个清晰的目标。</li>
<li>量化（Quantization）：该目标可以被量化成具体数据。</li>
<li>改进（Improvement）：有一种或几种改进途径不断接近目标。</li>
<li>验证（Evaluation）：有一种或几种验证方法确认（Verify）自己正在接近目标。</li>
</ul>


<p>综合到一起——TARQIE，即标题里这个奇怪的词汇（很高兴这个词压根不存在）。</p>

<h2>应用</h2>

<p>根据自己的现状，对自己的工作和生活（或学习），分别创建对应的Tarqie模型，这里我称其为Tarqie-J（ob）和Tarqie-L（ife）。</p>

<h3>Tarqie-J</h3>

<ul>
<li>目标

<ol>
<li>高效完成Q1 OKR。</li>
</ol>
</li>
<li>量化

<ol>
<li>成功迁移124个Test。</li>
<li>为这些Test配置一个可稳定运行的环境。</li>
</ol>
</li>
<li>改进

<ol>
<li>恬着脸皮向不同的同事请教。</li>
<li>理解当前Test的架构和流程。</li>
<li>阅读The Art Of Unit Test，Guice Book和GuiceBerry Manual，了解如何用Guice写良好的Test。</li>
<li>阅读Java Best Practices和Effective Java。</li>
<li>阅读Java Performance，了解JVM。</li>
</ol>
</li>
<li>验证

<ol>
<li>每周与mentor交流，进行进度控制/难点求助。</li>
<li>Test的数量不断增加。</li>
<li>CL中review的数量持续降低。</li>
<li>逐步理解项目代码背后的机理。</li>
</ol>
</li>
</ul>


<h3>Tarqie-L</h3>

<ul>
<li>目标

<ol>
<li>提高精力，理解Python。</li>
</ol>
</li>
<li>量化

<ol>
<li>精力提高（自然醒，不赖床）。</li>
<li>熟悉Python及其实现。</li>
<li>理解4个开源项目的架构。</li>
</ol>
</li>
<li>改进

<ol>
<li>早睡早起（11:30 PM ~ 8:30 AM）+每天运动20分钟。</li>
<li>阅读相关技术书籍（Python源码剖析，开源项目架构等）。</li>
<li>增强学习能力（阅读《Study Less, Learn More》）</li>
<li>控制手淫频率至两周一次。</li>
</ol>
</li>
<li>验证

<ol>
<li>早睡早起+运动不间断。</li>
<li>学习能力增强（+系统学习能力）。</li>
<li>逐步理解Python各个部分的实现（对象，语句，元组，列表，字典，控制流，异常，自定义类型，列表理解，生成器，模块，从源码了解其机制）。</li>
<li>每周理解1个开源项目的架构。</li>
</ol>
</li>
</ul>


<h2>实验</h2>

<h3>内容</h3>

<p>在接下来的一个月（2014年3月），分别应用Tarqie-J和Tarqie-L到自己的工作和学习中。</p>

<h3>假设</h3>

<ol>
<li>效率比之前提升50%。</li>
<li>掌握两样新技能。</li>
</ol>


<h3>实验开始</h3>

<h2>未完待续</h2>
]]></content>
  </entry>
  
</feed>
